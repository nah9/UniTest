{
  "fbsFolder": "testRunners",
  "fcsFolder": "assertFcs",
  "prgsFolder": "assertLibTests",
  "dtsFolder": "dts",
  "fbs": [],
  "fcs": [
    {
      "name": "assertEqual_BOOL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_BOOL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_BOOL := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_BOOL : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_BOOL.md*)\nVAR_INPUT\n\tact : BOOL; (*Variable to test*)\n\txp : BOOL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_BYTE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_BYTE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_BYTE := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_BYTE : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_BYTE.md*)\nVAR_INPUT\n\tact : BYTE; (*Variable to test*)\n\txp : BYTE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_WORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_WORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_WORD := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_WORD : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_WORD.md*)\nVAR_INPUT\n\tact : WORD; (*Variable to test*)\n\txp : WORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_DWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_DWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_DWORD := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_DWORD : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_DWORD.md*)\nVAR_INPUT\n\tact : DWORD; (*Variable to test*)\n\txp : DWORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_LWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_LWORD := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_LWORD : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LWORD.md*)\nVAR_INPUT\n\tact : LWORD; (*Variable to test*)\n\txp : LWORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_SINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_SINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_SINT := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_SINT : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_SINT.md*)\nVAR_INPUT\n\tact : SINT; (*Variable to test*)\n\txp : SINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_USINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_USINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_USINT := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_USINT : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_USINT.md*)\nVAR_INPUT\n\tact : USINT; (*Variable to test*)\n\txp : USINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_INT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_INT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_INT := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_INT : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_INT.md*)\nVAR_INPUT\n\tact : INT; (*Variable to test*)\n\txp : INT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_UINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_UINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_UINT := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_UINT : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_UINT.md*)\nVAR_INPUT\n\tact : UINT; (*Variable to test*)\n\txp : UINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_DINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_DINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_DINT := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_DINT : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_DINT.md*)\nVAR_INPUT\n\tact : DINT; (*Variable to test*)\n\txp : DINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_UDINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_UDINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_UDINT := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_UDINT : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_UDINT.md*)\nVAR_INPUT\n\tact : UDINT; (*Variable to test*)\n\txp : UDINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_LINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_LINT := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_LINT : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LINT.md*)\nVAR_INPUT\n\tact : LINT; (*Variable to test*)\n\txp : LINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_ULINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_ULINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_ULINT := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_ULINT : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_ULINT.md*)\nVAR_INPUT\n\tact : ULINT; (*Variable to test*)\n\txp : ULINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_REAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_REAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_REAL := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_REAL : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_REAL.md*)\nVAR_INPUT\n\tact : REAL; (*Variable to test*)\n\txp : REAL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_LREAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LREAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_LREAL := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_LREAL : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LREAL.md*)\nVAR_INPUT\n\tact : LREAL; (*Variable to test*)\n\txp : LREAL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_STRING",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_STRING.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_STRING := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_STRING : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_STRING.md*)\nVAR_INPUT\n\tact : STRING; (*Variable to test*)\n\txp : STRING; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_WSTRING",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_WSTRING.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_WSTRING := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_WSTRING : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_WSTRING.md*)\nVAR_INPUT\n\tact : WSTRING; (*Variable to test*)\n\txp : WSTRING; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_TIME := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_TIME : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_TIME.md*)\nVAR_INPUT\n\tact : TIME; (*Variable to test*)\n\txp : TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_LTIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LTIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_LTIME := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_LTIME : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LTIME.md*)\nVAR_INPUT\n\tact : LTIME; (*Variable to test*)\n\txp : LTIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_DATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_DATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_DATE := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_DATE : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_DATE.md*)\nVAR_INPUT\n\tact : DATE; (*Variable to test*)\n\txp : DATE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_LDATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LDATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_LDATE := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_LDATE : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LDATE.md*)\nVAR_INPUT\n\tact : LDATE; (*Variable to test*)\n\txp : LDATE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_DATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_DATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_DATE_AND_TIME := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_DATE_AND_TIME : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_DATE_AND_TIME.md*)\nVAR_INPUT\n\tact : DATE_AND_TIME; (*Variable to test*)\n\txp : DATE_AND_TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_LDATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LDATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_LDATE_AND_TIME := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_LDATE_AND_TIME : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LDATE_AND_TIME.md*)\nVAR_INPUT\n\tact : LDATE_AND_TIME; (*Variable to test*)\n\txp : LDATE_AND_TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_TIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_TIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_TIME_OF_DAY := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_TIME_OF_DAY : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_TIME_OF_DAY.md*)\nVAR_INPUT\n\tact : TIME_OF_DAY; (*Variable to test*)\n\txp : TIME_OF_DAY; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertEqual_LTIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act = xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LTIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertEqual_LTIME_OF_DAY := act = xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertEqual_LTIME_OF_DAY : BOOL\n(*Returns TRUE if act = xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertEqual_LTIME_OF_DAY.md*)\nVAR_INPUT\n\tact : LTIME_OF_DAY; (*Variable to test*)\n\txp : LTIME_OF_DAY; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_BOOL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_BOOL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_BOOL := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_BOOL : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_BOOL.md*)\nVAR_INPUT\n\tact : BOOL; (*Variable to test*)\n\txp : BOOL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_BYTE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_BYTE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_BYTE := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_BYTE : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_BYTE.md*)\nVAR_INPUT\n\tact : BYTE; (*Variable to test*)\n\txp : BYTE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_WORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_WORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_WORD := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_WORD : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_WORD.md*)\nVAR_INPUT\n\tact : WORD; (*Variable to test*)\n\txp : WORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_DWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_DWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_DWORD := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_DWORD : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_DWORD.md*)\nVAR_INPUT\n\tact : DWORD; (*Variable to test*)\n\txp : DWORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_LWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_LWORD := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_LWORD : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LWORD.md*)\nVAR_INPUT\n\tact : LWORD; (*Variable to test*)\n\txp : LWORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_SINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_SINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_SINT := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_SINT : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_SINT.md*)\nVAR_INPUT\n\tact : SINT; (*Variable to test*)\n\txp : SINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_USINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_USINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_USINT := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_USINT : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_USINT.md*)\nVAR_INPUT\n\tact : USINT; (*Variable to test*)\n\txp : USINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_INT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_INT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_INT := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_INT : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_INT.md*)\nVAR_INPUT\n\tact : INT; (*Variable to test*)\n\txp : INT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_UINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_UINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_UINT := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_UINT : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_UINT.md*)\nVAR_INPUT\n\tact : UINT; (*Variable to test*)\n\txp : UINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_DINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_DINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_DINT := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_DINT : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_DINT.md*)\nVAR_INPUT\n\tact : DINT; (*Variable to test*)\n\txp : DINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_UDINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_UDINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_UDINT := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_UDINT : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_UDINT.md*)\nVAR_INPUT\n\tact : UDINT; (*Variable to test*)\n\txp : UDINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_LINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_LINT := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_LINT : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LINT.md*)\nVAR_INPUT\n\tact : LINT; (*Variable to test*)\n\txp : LINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_ULINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_ULINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_ULINT := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_ULINT : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_ULINT.md*)\nVAR_INPUT\n\tact : ULINT; (*Variable to test*)\n\txp : ULINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_REAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_REAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_REAL := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_REAL : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_REAL.md*)\nVAR_INPUT\n\tact : REAL; (*Variable to test*)\n\txp : REAL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_LREAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LREAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_LREAL := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_LREAL : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LREAL.md*)\nVAR_INPUT\n\tact : LREAL; (*Variable to test*)\n\txp : LREAL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_STRING",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_STRING.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_STRING := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_STRING : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_STRING.md*)\nVAR_INPUT\n\tact : STRING; (*Variable to test*)\n\txp : STRING; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_WSTRING",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_WSTRING.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_WSTRING := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_WSTRING : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_WSTRING.md*)\nVAR_INPUT\n\tact : WSTRING; (*Variable to test*)\n\txp : WSTRING; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_TIME := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_TIME : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_TIME.md*)\nVAR_INPUT\n\tact : TIME; (*Variable to test*)\n\txp : TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_LTIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LTIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_LTIME := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_LTIME : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LTIME.md*)\nVAR_INPUT\n\tact : LTIME; (*Variable to test*)\n\txp : LTIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_DATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_DATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_DATE := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_DATE : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_DATE.md*)\nVAR_INPUT\n\tact : DATE; (*Variable to test*)\n\txp : DATE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_LDATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LDATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_LDATE := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_LDATE : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LDATE.md*)\nVAR_INPUT\n\tact : LDATE; (*Variable to test*)\n\txp : LDATE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_DATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_DATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_DATE_AND_TIME := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_DATE_AND_TIME : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_DATE_AND_TIME.md*)\nVAR_INPUT\n\tact : DATE_AND_TIME; (*Variable to test*)\n\txp : DATE_AND_TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_LDATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LDATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_LDATE_AND_TIME := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_LDATE_AND_TIME : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LDATE_AND_TIME.md*)\nVAR_INPUT\n\tact : LDATE_AND_TIME; (*Variable to test*)\n\txp : LDATE_AND_TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_TIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_TIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_TIME_OF_DAY := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_TIME_OF_DAY : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_TIME_OF_DAY.md*)\nVAR_INPUT\n\tact : TIME_OF_DAY; (*Variable to test*)\n\txp : TIME_OF_DAY; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertNotEqual_LTIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <> xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LTIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertNotEqual_LTIME_OF_DAY := act <> xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertNotEqual_LTIME_OF_DAY : BOOL\n(*Returns TRUE if act <> xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertNotEqual_LTIME_OF_DAY.md*)\nVAR_INPUT\n\tact : LTIME_OF_DAY; (*Variable to test*)\n\txp : LTIME_OF_DAY; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_BYTE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_BYTE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_BYTE := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_BYTE : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_BYTE.md*)\nVAR_INPUT\n\tact : BYTE; (*Variable to test*)\n\txp : BYTE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_WORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_WORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_WORD := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_WORD : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_WORD.md*)\nVAR_INPUT\n\tact : WORD; (*Variable to test*)\n\txp : WORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_DWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_DWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_DWORD := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_DWORD : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_DWORD.md*)\nVAR_INPUT\n\tact : DWORD; (*Variable to test*)\n\txp : DWORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_LWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_LWORD := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_LWORD : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LWORD.md*)\nVAR_INPUT\n\tact : LWORD; (*Variable to test*)\n\txp : LWORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_SINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_SINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_SINT := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_SINT : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_SINT.md*)\nVAR_INPUT\n\tact : SINT; (*Variable to test*)\n\txp : SINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_USINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_USINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_USINT := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_USINT : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_USINT.md*)\nVAR_INPUT\n\tact : USINT; (*Variable to test*)\n\txp : USINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_INT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_INT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_INT := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_INT : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_INT.md*)\nVAR_INPUT\n\tact : INT; (*Variable to test*)\n\txp : INT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_UINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_UINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_UINT := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_UINT : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_UINT.md*)\nVAR_INPUT\n\tact : UINT; (*Variable to test*)\n\txp : UINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_DINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_DINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_DINT := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_DINT : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_DINT.md*)\nVAR_INPUT\n\tact : DINT; (*Variable to test*)\n\txp : DINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_UDINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_UDINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_UDINT := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_UDINT : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_UDINT.md*)\nVAR_INPUT\n\tact : UDINT; (*Variable to test*)\n\txp : UDINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_LINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_LINT := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_LINT : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LINT.md*)\nVAR_INPUT\n\tact : LINT; (*Variable to test*)\n\txp : LINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_ULINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_ULINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_ULINT := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_ULINT : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_ULINT.md*)\nVAR_INPUT\n\tact : ULINT; (*Variable to test*)\n\txp : ULINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_REAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_REAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_REAL := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_REAL : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_REAL.md*)\nVAR_INPUT\n\tact : REAL; (*Variable to test*)\n\txp : REAL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_LREAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LREAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_LREAL := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_LREAL : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LREAL.md*)\nVAR_INPUT\n\tact : LREAL; (*Variable to test*)\n\txp : LREAL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_TIME := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_TIME : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_TIME.md*)\nVAR_INPUT\n\tact : TIME; (*Variable to test*)\n\txp : TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_LTIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LTIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_LTIME := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_LTIME : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LTIME.md*)\nVAR_INPUT\n\tact : LTIME; (*Variable to test*)\n\txp : LTIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_DATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_DATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_DATE := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_DATE : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_DATE.md*)\nVAR_INPUT\n\tact : DATE; (*Variable to test*)\n\txp : DATE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_LDATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LDATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_LDATE := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_LDATE : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LDATE.md*)\nVAR_INPUT\n\tact : LDATE; (*Variable to test*)\n\txp : LDATE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_DATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_DATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_DATE_AND_TIME := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_DATE_AND_TIME : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_DATE_AND_TIME.md*)\nVAR_INPUT\n\tact : DATE_AND_TIME; (*Variable to test*)\n\txp : DATE_AND_TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_LDATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LDATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_LDATE_AND_TIME := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_LDATE_AND_TIME : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LDATE_AND_TIME.md*)\nVAR_INPUT\n\tact : LDATE_AND_TIME; (*Variable to test*)\n\txp : LDATE_AND_TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_TIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_TIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_TIME_OF_DAY := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_TIME_OF_DAY : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_TIME_OF_DAY.md*)\nVAR_INPUT\n\tact : TIME_OF_DAY; (*Variable to test*)\n\txp : TIME_OF_DAY; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreater_LTIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act > xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LTIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreater_LTIME_OF_DAY := act > xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreater_LTIME_OF_DAY : BOOL\n(*Returns TRUE if act > xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreater_LTIME_OF_DAY.md*)\nVAR_INPUT\n\tact : LTIME_OF_DAY; (*Variable to test*)\n\txp : LTIME_OF_DAY; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_BYTE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_BYTE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_BYTE := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_BYTE : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_BYTE.md*)\nVAR_INPUT\n\tact : BYTE; (*Variable to test*)\n\txp : BYTE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_WORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_WORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_WORD := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_WORD : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_WORD.md*)\nVAR_INPUT\n\tact : WORD; (*Variable to test*)\n\txp : WORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_DWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_DWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_DWORD := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_DWORD : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_DWORD.md*)\nVAR_INPUT\n\tact : DWORD; (*Variable to test*)\n\txp : DWORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_LWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_LWORD := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_LWORD : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LWORD.md*)\nVAR_INPUT\n\tact : LWORD; (*Variable to test*)\n\txp : LWORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_SINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_SINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_SINT := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_SINT : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_SINT.md*)\nVAR_INPUT\n\tact : SINT; (*Variable to test*)\n\txp : SINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_USINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_USINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_USINT := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_USINT : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_USINT.md*)\nVAR_INPUT\n\tact : USINT; (*Variable to test*)\n\txp : USINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_INT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_INT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_INT := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_INT : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_INT.md*)\nVAR_INPUT\n\tact : INT; (*Variable to test*)\n\txp : INT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_UINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_UINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_UINT := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_UINT : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_UINT.md*)\nVAR_INPUT\n\tact : UINT; (*Variable to test*)\n\txp : UINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_DINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_DINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_DINT := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_DINT : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_DINT.md*)\nVAR_INPUT\n\tact : DINT; (*Variable to test*)\n\txp : DINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_UDINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_UDINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_UDINT := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_UDINT : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_UDINT.md*)\nVAR_INPUT\n\tact : UDINT; (*Variable to test*)\n\txp : UDINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_LINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_LINT := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_LINT : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LINT.md*)\nVAR_INPUT\n\tact : LINT; (*Variable to test*)\n\txp : LINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_ULINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_ULINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_ULINT := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_ULINT : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_ULINT.md*)\nVAR_INPUT\n\tact : ULINT; (*Variable to test*)\n\txp : ULINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_REAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_REAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_REAL := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_REAL : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_REAL.md*)\nVAR_INPUT\n\tact : REAL; (*Variable to test*)\n\txp : REAL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_LREAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LREAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_LREAL := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_LREAL : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LREAL.md*)\nVAR_INPUT\n\tact : LREAL; (*Variable to test*)\n\txp : LREAL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_TIME := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_TIME : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_TIME.md*)\nVAR_INPUT\n\tact : TIME; (*Variable to test*)\n\txp : TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_LTIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LTIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_LTIME := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_LTIME : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LTIME.md*)\nVAR_INPUT\n\tact : LTIME; (*Variable to test*)\n\txp : LTIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_DATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_DATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_DATE := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_DATE : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_DATE.md*)\nVAR_INPUT\n\tact : DATE; (*Variable to test*)\n\txp : DATE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_LDATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LDATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_LDATE := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_LDATE : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LDATE.md*)\nVAR_INPUT\n\tact : LDATE; (*Variable to test*)\n\txp : LDATE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_DATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_DATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_DATE_AND_TIME := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_DATE_AND_TIME : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_DATE_AND_TIME.md*)\nVAR_INPUT\n\tact : DATE_AND_TIME; (*Variable to test*)\n\txp : DATE_AND_TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_LDATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LDATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_LDATE_AND_TIME := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_LDATE_AND_TIME : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LDATE_AND_TIME.md*)\nVAR_INPUT\n\tact : LDATE_AND_TIME; (*Variable to test*)\n\txp : LDATE_AND_TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_TIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_TIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_TIME_OF_DAY := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_TIME_OF_DAY : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_TIME_OF_DAY.md*)\nVAR_INPUT\n\tact : TIME_OF_DAY; (*Variable to test*)\n\txp : TIME_OF_DAY; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertGreaterEqual_LTIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act >= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LTIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertGreaterEqual_LTIME_OF_DAY := act >= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertGreaterEqual_LTIME_OF_DAY : BOOL\n(*Returns TRUE if act >= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertGreaterEqual_LTIME_OF_DAY.md*)\nVAR_INPUT\n\tact : LTIME_OF_DAY; (*Variable to test*)\n\txp : LTIME_OF_DAY; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_BYTE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_BYTE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_BYTE := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_BYTE : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_BYTE.md*)\nVAR_INPUT\n\tact : BYTE; (*Variable to test*)\n\txp : BYTE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_WORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_WORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_WORD := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_WORD : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_WORD.md*)\nVAR_INPUT\n\tact : WORD; (*Variable to test*)\n\txp : WORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_DWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_DWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_DWORD := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_DWORD : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_DWORD.md*)\nVAR_INPUT\n\tact : DWORD; (*Variable to test*)\n\txp : DWORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_LWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_LWORD := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_LWORD : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LWORD.md*)\nVAR_INPUT\n\tact : LWORD; (*Variable to test*)\n\txp : LWORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_SINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_SINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_SINT := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_SINT : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_SINT.md*)\nVAR_INPUT\n\tact : SINT; (*Variable to test*)\n\txp : SINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_USINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_USINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_USINT := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_USINT : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_USINT.md*)\nVAR_INPUT\n\tact : USINT; (*Variable to test*)\n\txp : USINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_INT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_INT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_INT := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_INT : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_INT.md*)\nVAR_INPUT\n\tact : INT; (*Variable to test*)\n\txp : INT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_UINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_UINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_UINT := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_UINT : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_UINT.md*)\nVAR_INPUT\n\tact : UINT; (*Variable to test*)\n\txp : UINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_DINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_DINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_DINT := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_DINT : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_DINT.md*)\nVAR_INPUT\n\tact : DINT; (*Variable to test*)\n\txp : DINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_UDINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_UDINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_UDINT := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_UDINT : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_UDINT.md*)\nVAR_INPUT\n\tact : UDINT; (*Variable to test*)\n\txp : UDINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_LINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_LINT := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_LINT : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LINT.md*)\nVAR_INPUT\n\tact : LINT; (*Variable to test*)\n\txp : LINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_ULINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_ULINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_ULINT := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_ULINT : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_ULINT.md*)\nVAR_INPUT\n\tact : ULINT; (*Variable to test*)\n\txp : ULINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_REAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_REAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_REAL := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_REAL : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_REAL.md*)\nVAR_INPUT\n\tact : REAL; (*Variable to test*)\n\txp : REAL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_LREAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LREAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_LREAL := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_LREAL : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LREAL.md*)\nVAR_INPUT\n\tact : LREAL; (*Variable to test*)\n\txp : LREAL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_TIME := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_TIME : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_TIME.md*)\nVAR_INPUT\n\tact : TIME; (*Variable to test*)\n\txp : TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_LTIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LTIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_LTIME := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_LTIME : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LTIME.md*)\nVAR_INPUT\n\tact : LTIME; (*Variable to test*)\n\txp : LTIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_DATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_DATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_DATE := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_DATE : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_DATE.md*)\nVAR_INPUT\n\tact : DATE; (*Variable to test*)\n\txp : DATE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_LDATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LDATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_LDATE := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_LDATE : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LDATE.md*)\nVAR_INPUT\n\tact : LDATE; (*Variable to test*)\n\txp : LDATE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_DATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_DATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_DATE_AND_TIME := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_DATE_AND_TIME : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_DATE_AND_TIME.md*)\nVAR_INPUT\n\tact : DATE_AND_TIME; (*Variable to test*)\n\txp : DATE_AND_TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_LDATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LDATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_LDATE_AND_TIME := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_LDATE_AND_TIME : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LDATE_AND_TIME.md*)\nVAR_INPUT\n\tact : LDATE_AND_TIME; (*Variable to test*)\n\txp : LDATE_AND_TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_TIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_TIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_TIME_OF_DAY := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_TIME_OF_DAY : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_TIME_OF_DAY.md*)\nVAR_INPUT\n\tact : TIME_OF_DAY; (*Variable to test*)\n\txp : TIME_OF_DAY; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLess_LTIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act < xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LTIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLess_LTIME_OF_DAY := act < xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLess_LTIME_OF_DAY : BOOL\n(*Returns TRUE if act < xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLess_LTIME_OF_DAY.md*)\nVAR_INPUT\n\tact : LTIME_OF_DAY; (*Variable to test*)\n\txp : LTIME_OF_DAY; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_BYTE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_BYTE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_BYTE := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_BYTE : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_BYTE.md*)\nVAR_INPUT\n\tact : BYTE; (*Variable to test*)\n\txp : BYTE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_WORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_WORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_WORD := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_WORD : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_WORD.md*)\nVAR_INPUT\n\tact : WORD; (*Variable to test*)\n\txp : WORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_DWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_DWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_DWORD := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_DWORD : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_DWORD.md*)\nVAR_INPUT\n\tact : DWORD; (*Variable to test*)\n\txp : DWORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_LWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_LWORD := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_LWORD : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LWORD.md*)\nVAR_INPUT\n\tact : LWORD; (*Variable to test*)\n\txp : LWORD; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_SINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_SINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_SINT := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_SINT : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_SINT.md*)\nVAR_INPUT\n\tact : SINT; (*Variable to test*)\n\txp : SINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_USINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_USINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_USINT := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_USINT : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_USINT.md*)\nVAR_INPUT\n\tact : USINT; (*Variable to test*)\n\txp : USINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_INT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_INT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_INT := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_INT : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_INT.md*)\nVAR_INPUT\n\tact : INT; (*Variable to test*)\n\txp : INT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_UINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_UINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_UINT := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_UINT : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_UINT.md*)\nVAR_INPUT\n\tact : UINT; (*Variable to test*)\n\txp : UINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_DINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_DINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_DINT := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_DINT : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_DINT.md*)\nVAR_INPUT\n\tact : DINT; (*Variable to test*)\n\txp : DINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_UDINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_UDINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_UDINT := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_UDINT : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_UDINT.md*)\nVAR_INPUT\n\tact : UDINT; (*Variable to test*)\n\txp : UDINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_LINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_LINT := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_LINT : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LINT.md*)\nVAR_INPUT\n\tact : LINT; (*Variable to test*)\n\txp : LINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_ULINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_ULINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_ULINT := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_ULINT : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_ULINT.md*)\nVAR_INPUT\n\tact : ULINT; (*Variable to test*)\n\txp : ULINT; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_REAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_REAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_REAL := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_REAL : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_REAL.md*)\nVAR_INPUT\n\tact : REAL; (*Variable to test*)\n\txp : REAL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_LREAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LREAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_LREAL := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_LREAL : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LREAL.md*)\nVAR_INPUT\n\tact : LREAL; (*Variable to test*)\n\txp : LREAL; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_TIME := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_TIME : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_TIME.md*)\nVAR_INPUT\n\tact : TIME; (*Variable to test*)\n\txp : TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_LTIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LTIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_LTIME := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_LTIME : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LTIME.md*)\nVAR_INPUT\n\tact : LTIME; (*Variable to test*)\n\txp : LTIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_DATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_DATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_DATE := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_DATE : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_DATE.md*)\nVAR_INPUT\n\tact : DATE; (*Variable to test*)\n\txp : DATE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_LDATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LDATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_LDATE := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_LDATE : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LDATE.md*)\nVAR_INPUT\n\tact : LDATE; (*Variable to test*)\n\txp : LDATE; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_DATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_DATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_DATE_AND_TIME := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_DATE_AND_TIME : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_DATE_AND_TIME.md*)\nVAR_INPUT\n\tact : DATE_AND_TIME; (*Variable to test*)\n\txp : DATE_AND_TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_LDATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LDATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_LDATE_AND_TIME := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_LDATE_AND_TIME : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LDATE_AND_TIME.md*)\nVAR_INPUT\n\tact : LDATE_AND_TIME; (*Variable to test*)\n\txp : LDATE_AND_TIME; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_TIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_TIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_TIME_OF_DAY := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_TIME_OF_DAY : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_TIME_OF_DAY.md*)\nVAR_INPUT\n\tact : TIME_OF_DAY; (*Variable to test*)\n\txp : TIME_OF_DAY; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertLessEqual_LTIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act <= xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LTIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        }
      ],
      "code": "assertLessEqual_LTIME_OF_DAY := act <= xp;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertLessEqual_LTIME_OF_DAY : BOOL\n(*Returns TRUE if act <= xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertLessEqual_LTIME_OF_DAY.md*)\nVAR_INPUT\n\tact : LTIME_OF_DAY; (*Variable to test*)\n\txp : LTIME_OF_DAY; (*Variable to test against*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_BOOL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_BOOL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_BOOL := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_BOOL := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_BOOL : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_BOOL.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF BOOL; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF BOOL; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO BOOL; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO BOOL; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_BYTE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_BYTE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_BYTE := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_BYTE := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_BYTE : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_BYTE.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF BYTE; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF BYTE; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO BYTE; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO BYTE; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_WORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_WORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_WORD := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_WORD := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_WORD : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_WORD.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF WORD; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF WORD; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO WORD; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO WORD; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_DWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_DWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_DWORD := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_DWORD := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_DWORD : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_DWORD.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF DWORD; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF DWORD; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO DWORD; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO DWORD; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_LWORD",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LWORD.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LWORD := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LWORD := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_LWORD : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LWORD.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF LWORD; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF LWORD; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO LWORD; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO LWORD; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_SINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_SINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_SINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_SINT := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_SINT : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_SINT.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF SINT; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF SINT; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO SINT; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO SINT; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_USINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_USINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_USINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_USINT := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_USINT : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_USINT.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF USINT; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF USINT; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO USINT; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO USINT; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_INT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_INT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF INT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO INT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO INT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_INT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_INT := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_INT : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_INT.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF INT; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF INT; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO INT; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO INT; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_UINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_UINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_UINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_UINT := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_UINT : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_UINT.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF UINT; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF UINT; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO UINT; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO UINT; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_DINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_DINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_DINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_DINT := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_DINT : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_DINT.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF DINT; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF DINT; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO DINT; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO DINT; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_UDINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_UDINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_UDINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_UDINT := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_UDINT : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_UDINT.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF UDINT; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF UDINT; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO UDINT; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO UDINT; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_LINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LINT := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_LINT : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LINT.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF LINT; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF LINT; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO LINT; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO LINT; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_ULINT",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_ULINT.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_ULINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_ULINT := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_ULINT : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_ULINT.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF ULINT; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF ULINT; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO ULINT; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO ULINT; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_REAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_REAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_REAL := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_REAL := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_REAL : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_REAL.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF REAL; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF REAL; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO REAL; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO REAL; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_LREAL",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LREAL.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LREAL := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LREAL := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_LREAL : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LREAL.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF LREAL; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF LREAL; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO LREAL; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO LREAL; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_STRING",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_STRING.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_STRING := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_STRING := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_STRING : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_STRING.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF STRING; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF STRING; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO STRING; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO STRING; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_WSTRING",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_WSTRING.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_WSTRING := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_WSTRING := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_WSTRING : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_WSTRING.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF WSTRING; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF WSTRING; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO WSTRING; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO WSTRING; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_TIME := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_TIME := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_TIME : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_TIME.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF TIME; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF TIME; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO TIME; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO TIME; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_LTIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LTIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LTIME := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LTIME := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_LTIME : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LTIME.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF LTIME; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF LTIME; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO LTIME; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO LTIME; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_DATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_DATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_DATE := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_DATE := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_DATE : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_DATE.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF DATE; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF DATE; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO DATE; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO DATE; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_LDATE",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LDATE.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LDATE := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LDATE := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_LDATE : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LDATE.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF LDATE; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF LDATE; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO LDATE; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO LDATE; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_DATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_DATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_DATE_AND_TIME := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_DATE_AND_TIME := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_DATE_AND_TIME : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_DATE_AND_TIME.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF DATE_AND_TIME; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF DATE_AND_TIME; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO DATE_AND_TIME; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO DATE_AND_TIME; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_LDATE_AND_TIME",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LDATE_AND_TIME.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LDATE_AND_TIME := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LDATE_AND_TIME := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_LDATE_AND_TIME : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LDATE_AND_TIME.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF LDATE_AND_TIME; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF LDATE_AND_TIME; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO LDATE_AND_TIME; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO LDATE_AND_TIME; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_TIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_TIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_TIME_OF_DAY := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_TIME_OF_DAY := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_TIME_OF_DAY : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_TIME_OF_DAY.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF TIME_OF_DAY; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF TIME_OF_DAY; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO TIME_OF_DAY; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO TIME_OF_DAY; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertArrayEqual_LTIME_OF_DAY",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if act == xp.",
      "docLink": "https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LTIME_OF_DAY.md",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "act",
              "type": "POINTER TO ARRAY[0..250] OF LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            },
            {
              "name": "xp",
              "type": "POINTER TO ARRAY[0..250] OF LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test against"
            }
          ]
        },
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "size",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Size of the array (ADR(act))"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable"
            },
            {
              "name": "vStop",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "For loop iteration stop calculation result"
            },
            {
              "name": "pt1",
              "type": "POINTER TO LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array act"
            },
            {
              "name": "pt2",
              "type": "POINTER TO LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Pointer to the element of the array xp"
            }
          ]
        }
      ],
      "code": "vStop := SHR(size,2)-1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act[i]);\n\tpt2 := ADR(xp[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LTIME_OF_DAY := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LTIME_OF_DAY := TRUE;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertArrayEqual_LTIME_OF_DAY : BOOL\n(*Returns TRUE if act == xp.*)\n(*Docs: https://github.com/tkucic/iecUnitTest/blob/master/docs/docs/ns/Global/fc/assertArrayEqual_LTIME_OF_DAY.md*)\nVAR_INPUT\n\tact : POINTER TO ARRAY[0..250] OF LTIME_OF_DAY; (*Variable to test*)\n\txp : POINTER TO ARRAY[0..250] OF LTIME_OF_DAY; (*Variable to test against*)\nEND_VAR\nVAR_INPUT\n\tsize : UINT; (*Size of the array (ADR(act))*)\nEND_VAR\nVAR\n\ti : UINT; (*Iterator variable*)\n\tvStop : UINT; (*For loop iteration stop calculation result*)\n\tpt1 : POINTER TO LTIME_OF_DAY; (*Pointer to the element of the array act*)\n\tpt2 : POINTER TO LTIME_OF_DAY; (*Pointer to the element of the array xp*)\nEND_VAR\n"
    },
    {
      "name": "assertTrue",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if condition is TRUE",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "condition",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            }
          ]
        }
      ],
      "code": "assertTrue := condition;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertTrue : BOOL\n(*Returns TRUE if condition is TRUE*)\nVAR_INPUT\n\tcondition : BOOL; (*Variable to test*)\nEND_VAR\n"
    },
    {
      "name": "assertFalse",
      "type": "function",
      "returnType": "BOOL",
      "description": "Returns TRUE if condition is NOT TRUE",
      "if": [
        {
          "name": "VAR_INPUT",
          "vars": [
            {
              "name": "condition",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Variable to test"
            }
          ]
        }
      ],
      "code": "assertFalse := NOT condition;\nRETURN;\n",
      "actions": [],
      "declaration": "FUNCTION assertFalse : BOOL\n(*Returns TRUE if condition is NOT TRUE*)\nVAR_INPUT\n\tcondition : BOOL; (*Variable to test*)\nEND_VAR\n"
    }
  ],
  "prgs": [
    {
      "name": "test_assertEqual_BOOL",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_BOOL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 0,\n\tName := 'assertEqual_BOOL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BOOL(115.4);\n\tvTestCase1_xp := REAL_TO_BOOL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_BOOL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BOOL(115.4);\n\tvTestCase2_xp := REAL_TO_BOOL(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_BOOL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_BOOL\n(*Collection of tests for assert function assertEqual_BOOL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : BOOL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : BOOL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : BOOL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : BOOL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : BOOL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : BOOL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_BYTE",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_BYTE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 1,\n\tName := 'assertEqual_BYTE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BYTE(115.4);\n\tvTestCase1_xp := REAL_TO_BYTE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_BYTE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BYTE(115.4);\n\tvTestCase2_xp := REAL_TO_BYTE(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_BYTE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_BYTE\n(*Collection of tests for assert function assertEqual_BYTE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : BYTE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : BYTE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : BYTE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : BYTE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : BYTE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : BYTE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_WORD",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_WORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 2,\n\tName := 'assertEqual_WORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WORD(115.4);\n\tvTestCase1_xp := REAL_TO_WORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_WORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WORD(115.4);\n\tvTestCase2_xp := REAL_TO_WORD(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_WORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_WORD\n(*Collection of tests for assert function assertEqual_WORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : WORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : WORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : WORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : WORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : WORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : WORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_DWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_DWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 3,\n\tName := 'assertEqual_DWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DWORD(115.4);\n\tvTestCase1_xp := REAL_TO_DWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_DWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DWORD(115.4);\n\tvTestCase2_xp := REAL_TO_DWORD(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_DWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_DWORD\n(*Collection of tests for assert function assertEqual_DWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DWORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DWORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DWORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DWORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DWORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DWORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_LWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_LWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 4,\n\tName := 'assertEqual_LWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LWORD(115.4);\n\tvTestCase1_xp := REAL_TO_LWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LWORD(115.4);\n\tvTestCase2_xp := REAL_TO_LWORD(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_LWORD\n(*Collection of tests for assert function assertEqual_LWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LWORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LWORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LWORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LWORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LWORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LWORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_SINT",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_SINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 5,\n\tName := 'assertEqual_SINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_SINT(115.4);\n\tvTestCase1_xp := REAL_TO_SINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_SINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_SINT(115.4);\n\tvTestCase2_xp := REAL_TO_SINT(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_SINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_SINT\n(*Collection of tests for assert function assertEqual_SINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : SINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : SINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : SINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : SINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : SINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : SINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_USINT",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_USINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 6,\n\tName := 'assertEqual_USINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_USINT(115.4);\n\tvTestCase1_xp := REAL_TO_USINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_USINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_USINT(115.4);\n\tvTestCase2_xp := REAL_TO_USINT(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_USINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_USINT\n(*Collection of tests for assert function assertEqual_USINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : USINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : USINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : USINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : USINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : USINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : USINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_INT",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_INT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 7,\n\tName := 'assertEqual_INT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_INT(115.4);\n\tvTestCase1_xp := REAL_TO_INT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_INT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_INT(115.4);\n\tvTestCase2_xp := REAL_TO_INT(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_INT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_INT\n(*Collection of tests for assert function assertEqual_INT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : INT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : INT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : INT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : INT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : INT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : INT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_UINT",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_UINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 8,\n\tName := 'assertEqual_UINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UINT(115.4);\n\tvTestCase1_xp := REAL_TO_UINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_UINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UINT(115.4);\n\tvTestCase2_xp := REAL_TO_UINT(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_UINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_UINT\n(*Collection of tests for assert function assertEqual_UINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : UINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : UINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : UINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : UINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : UINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : UINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_DINT",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_DINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 9,\n\tName := 'assertEqual_DINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DINT(115.4);\n\tvTestCase1_xp := REAL_TO_DINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_DINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DINT(115.4);\n\tvTestCase2_xp := REAL_TO_DINT(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_DINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_DINT\n(*Collection of tests for assert function assertEqual_DINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_UDINT",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_UDINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 10,\n\tName := 'assertEqual_UDINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UDINT(115.4);\n\tvTestCase1_xp := REAL_TO_UDINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_UDINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UDINT(115.4);\n\tvTestCase2_xp := REAL_TO_UDINT(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_UDINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_UDINT\n(*Collection of tests for assert function assertEqual_UDINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : UDINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : UDINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : UDINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : UDINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : UDINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : UDINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_LINT",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_LINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 11,\n\tName := 'assertEqual_LINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LINT(115.4);\n\tvTestCase1_xp := REAL_TO_LINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LINT(115.4);\n\tvTestCase2_xp := REAL_TO_LINT(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_LINT\n(*Collection of tests for assert function assertEqual_LINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_ULINT",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_ULINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 12,\n\tName := 'assertEqual_ULINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_ULINT(115.4);\n\tvTestCase1_xp := REAL_TO_ULINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_ULINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_ULINT(115.4);\n\tvTestCase2_xp := REAL_TO_ULINT(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_ULINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_ULINT\n(*Collection of tests for assert function assertEqual_ULINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ULINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : ULINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : ULINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : ULINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : ULINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : ULINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_REAL",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_REAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 13,\n\tName := 'assertEqual_REAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_REAL(115.4);\n\tvTestCase1_xp := REAL_TO_REAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_REAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_REAL(115.4);\n\tvTestCase2_xp := REAL_TO_REAL(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_REAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_REAL\n(*Collection of tests for assert function assertEqual_REAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : REAL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : REAL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : REAL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : REAL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : REAL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : REAL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_LREAL",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_LREAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 14,\n\tName := 'assertEqual_LREAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LREAL(115.4);\n\tvTestCase1_xp := REAL_TO_LREAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LREAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LREAL(115.4);\n\tvTestCase2_xp := REAL_TO_LREAL(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LREAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_LREAL\n(*Collection of tests for assert function assertEqual_LREAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LREAL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LREAL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LREAL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LREAL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LREAL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LREAL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_STRING",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_STRING",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 15,\n\tName := 'assertEqual_STRING',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_STRING(115.4);\n\tvTestCase1_xp := REAL_TO_STRING(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_STRING(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_STRING(115.4);\n\tvTestCase2_xp := REAL_TO_STRING(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_STRING(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_STRING\n(*Collection of tests for assert function assertEqual_STRING*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : STRING; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : STRING; (*Test data 2 of test case 1*)\n\tvTestCase2_act : STRING; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : STRING; (*Test data 2 of test case 2*)\n\tvTestCase3_act : STRING; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : STRING; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_WSTRING",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_WSTRING",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 16,\n\tName := 'assertEqual_WSTRING',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WSTRING(115.4);\n\tvTestCase1_xp := REAL_TO_WSTRING(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_WSTRING(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WSTRING(115.4);\n\tvTestCase2_xp := REAL_TO_WSTRING(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_WSTRING(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_WSTRING\n(*Collection of tests for assert function assertEqual_WSTRING*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : WSTRING; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : WSTRING; (*Test data 2 of test case 1*)\n\tvTestCase2_act : WSTRING; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : WSTRING; (*Test data 2 of test case 2*)\n\tvTestCase3_act : WSTRING; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : WSTRING; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 17,\n\tName := 'assertEqual_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_TIME(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_TIME\n(*Collection of tests for assert function assertEqual_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_LTIME",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_LTIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 18,\n\tName := 'assertEqual_LTIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME(115.4);\n\tvTestCase1_xp := REAL_TO_LTIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LTIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LTIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_LTIME\n(*Collection of tests for assert function assertEqual_LTIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LTIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LTIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LTIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LTIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LTIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LTIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_DATE",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_DATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 19,\n\tName := 'assertEqual_DATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE(115.4);\n\tvTestCase1_xp := REAL_TO_DATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_DATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE(115.4);\n\tvTestCase2_xp := REAL_TO_DATE(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_DATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_DATE\n(*Collection of tests for assert function assertEqual_DATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DATE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DATE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DATE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DATE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DATE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DATE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_LDATE",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_LDATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 20,\n\tName := 'assertEqual_LDATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE(115.4);\n\tvTestCase1_xp := REAL_TO_LDATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LDATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LDATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_LDATE\n(*Collection of tests for assert function assertEqual_LDATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LDATE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LDATE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LDATE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LDATE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LDATE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LDATE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_DATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_DATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 21,\n\tName := 'assertEqual_DATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE_AND_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_DATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_DATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE_AND_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_DATE_AND_TIME(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_DATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_DATE_AND_TIME\n(*Collection of tests for assert function assertEqual_DATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DATE_AND_TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DATE_AND_TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DATE_AND_TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DATE_AND_TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DATE_AND_TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DATE_AND_TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_LDATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_LDATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 22,\n\tName := 'assertEqual_LDATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE_AND_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_LDATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LDATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE_AND_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE_AND_TIME(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LDATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_LDATE_AND_TIME\n(*Collection of tests for assert function assertEqual_LDATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LDATE_AND_TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LDATE_AND_TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LDATE_AND_TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LDATE_AND_TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LDATE_AND_TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LDATE_AND_TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_TIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_TIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 23,\n\tName := 'assertEqual_TIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME_OF_DAY(115.4);\n\tvTestCase1_xp := REAL_TO_TIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_TIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME_OF_DAY(115.4);\n\tvTestCase2_xp := REAL_TO_TIME_OF_DAY(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_TIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_TIME_OF_DAY\n(*Collection of tests for assert function assertEqual_TIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : TIME_OF_DAY; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : TIME_OF_DAY; (*Test data 2 of test case 1*)\n\tvTestCase2_act : TIME_OF_DAY; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : TIME_OF_DAY; (*Test data 2 of test case 2*)\n\tvTestCase3_act : TIME_OF_DAY; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : TIME_OF_DAY; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertEqual_LTIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertEqual_LTIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 24,\n\tName := 'assertEqual_LTIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME_OF_DAY(115.4);\n\tvTestCase1_xp := REAL_TO_LTIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LTIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME_OF_DAY(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME_OF_DAY(-84.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LTIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertEqual_LTIME_OF_DAY\n(*Collection of tests for assert function assertEqual_LTIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LTIME_OF_DAY; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LTIME_OF_DAY; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LTIME_OF_DAY; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LTIME_OF_DAY; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LTIME_OF_DAY; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LTIME_OF_DAY; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_BOOL",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_BOOL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 25,\n\tName := 'assertNotEqual_BOOL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BOOL(115.4);\n\tvTestCase1_xp := REAL_TO_BOOL(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_BOOL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BOOL(115.4);\n\tvTestCase2_xp := REAL_TO_BOOL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_BOOL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_BOOL\n(*Collection of tests for assert function assertNotEqual_BOOL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : BOOL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : BOOL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : BOOL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : BOOL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : BOOL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : BOOL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_BYTE",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_BYTE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 26,\n\tName := 'assertNotEqual_BYTE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BYTE(115.4);\n\tvTestCase1_xp := REAL_TO_BYTE(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_BYTE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BYTE(115.4);\n\tvTestCase2_xp := REAL_TO_BYTE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_BYTE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_BYTE\n(*Collection of tests for assert function assertNotEqual_BYTE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : BYTE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : BYTE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : BYTE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : BYTE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : BYTE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : BYTE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_WORD",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_WORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 27,\n\tName := 'assertNotEqual_WORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WORD(115.4);\n\tvTestCase1_xp := REAL_TO_WORD(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_WORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WORD(115.4);\n\tvTestCase2_xp := REAL_TO_WORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_WORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_WORD\n(*Collection of tests for assert function assertNotEqual_WORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : WORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : WORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : WORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : WORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : WORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : WORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_DWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_DWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 28,\n\tName := 'assertNotEqual_DWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DWORD(115.4);\n\tvTestCase1_xp := REAL_TO_DWORD(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_DWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DWORD(115.4);\n\tvTestCase2_xp := REAL_TO_DWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_DWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_DWORD\n(*Collection of tests for assert function assertNotEqual_DWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DWORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DWORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DWORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DWORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DWORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DWORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_LWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_LWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 29,\n\tName := 'assertNotEqual_LWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LWORD(115.4);\n\tvTestCase1_xp := REAL_TO_LWORD(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LWORD(115.4);\n\tvTestCase2_xp := REAL_TO_LWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_LWORD\n(*Collection of tests for assert function assertNotEqual_LWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LWORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LWORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LWORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LWORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LWORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LWORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_SINT",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_SINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 30,\n\tName := 'assertNotEqual_SINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_SINT(115.4);\n\tvTestCase1_xp := REAL_TO_SINT(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_SINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_SINT(115.4);\n\tvTestCase2_xp := REAL_TO_SINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_SINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_SINT\n(*Collection of tests for assert function assertNotEqual_SINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : SINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : SINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : SINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : SINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : SINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : SINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_USINT",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_USINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 31,\n\tName := 'assertNotEqual_USINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_USINT(115.4);\n\tvTestCase1_xp := REAL_TO_USINT(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_USINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_USINT(115.4);\n\tvTestCase2_xp := REAL_TO_USINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_USINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_USINT\n(*Collection of tests for assert function assertNotEqual_USINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : USINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : USINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : USINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : USINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : USINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : USINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_INT",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_INT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 32,\n\tName := 'assertNotEqual_INT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_INT(115.4);\n\tvTestCase1_xp := REAL_TO_INT(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_INT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_INT(115.4);\n\tvTestCase2_xp := REAL_TO_INT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_INT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_INT\n(*Collection of tests for assert function assertNotEqual_INT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : INT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : INT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : INT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : INT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : INT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : INT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_UINT",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_UINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 33,\n\tName := 'assertNotEqual_UINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UINT(115.4);\n\tvTestCase1_xp := REAL_TO_UINT(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_UINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UINT(115.4);\n\tvTestCase2_xp := REAL_TO_UINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_UINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_UINT\n(*Collection of tests for assert function assertNotEqual_UINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : UINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : UINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : UINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : UINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : UINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : UINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_DINT",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_DINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 34,\n\tName := 'assertNotEqual_DINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DINT(115.4);\n\tvTestCase1_xp := REAL_TO_DINT(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_DINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DINT(115.4);\n\tvTestCase2_xp := REAL_TO_DINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_DINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_DINT\n(*Collection of tests for assert function assertNotEqual_DINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_UDINT",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_UDINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 35,\n\tName := 'assertNotEqual_UDINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UDINT(115.4);\n\tvTestCase1_xp := REAL_TO_UDINT(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_UDINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UDINT(115.4);\n\tvTestCase2_xp := REAL_TO_UDINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_UDINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_UDINT\n(*Collection of tests for assert function assertNotEqual_UDINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : UDINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : UDINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : UDINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : UDINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : UDINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : UDINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_LINT",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_LINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 36,\n\tName := 'assertNotEqual_LINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LINT(115.4);\n\tvTestCase1_xp := REAL_TO_LINT(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LINT(115.4);\n\tvTestCase2_xp := REAL_TO_LINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_LINT\n(*Collection of tests for assert function assertNotEqual_LINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_ULINT",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_ULINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 37,\n\tName := 'assertNotEqual_ULINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_ULINT(115.4);\n\tvTestCase1_xp := REAL_TO_ULINT(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_ULINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_ULINT(115.4);\n\tvTestCase2_xp := REAL_TO_ULINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_ULINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_ULINT\n(*Collection of tests for assert function assertNotEqual_ULINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ULINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : ULINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : ULINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : ULINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : ULINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : ULINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_REAL",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_REAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 38,\n\tName := 'assertNotEqual_REAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_REAL(115.4);\n\tvTestCase1_xp := REAL_TO_REAL(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_REAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_REAL(115.4);\n\tvTestCase2_xp := REAL_TO_REAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_REAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_REAL\n(*Collection of tests for assert function assertNotEqual_REAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : REAL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : REAL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : REAL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : REAL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : REAL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : REAL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_LREAL",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_LREAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 39,\n\tName := 'assertNotEqual_LREAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LREAL(115.4);\n\tvTestCase1_xp := REAL_TO_LREAL(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LREAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LREAL(115.4);\n\tvTestCase2_xp := REAL_TO_LREAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LREAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_LREAL\n(*Collection of tests for assert function assertNotEqual_LREAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LREAL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LREAL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LREAL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LREAL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LREAL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LREAL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_STRING",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_STRING",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 40,\n\tName := 'assertNotEqual_STRING',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_STRING(115.4);\n\tvTestCase1_xp := REAL_TO_STRING(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_STRING(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_STRING(115.4);\n\tvTestCase2_xp := REAL_TO_STRING(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_STRING(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_STRING\n(*Collection of tests for assert function assertNotEqual_STRING*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : STRING; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : STRING; (*Test data 2 of test case 1*)\n\tvTestCase2_act : STRING; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : STRING; (*Test data 2 of test case 2*)\n\tvTestCase3_act : STRING; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : STRING; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_WSTRING",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_WSTRING",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 41,\n\tName := 'assertNotEqual_WSTRING',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WSTRING(115.4);\n\tvTestCase1_xp := REAL_TO_WSTRING(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_WSTRING(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WSTRING(115.4);\n\tvTestCase2_xp := REAL_TO_WSTRING(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_WSTRING(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_WSTRING\n(*Collection of tests for assert function assertNotEqual_WSTRING*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : WSTRING; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : WSTRING; (*Test data 2 of test case 1*)\n\tvTestCase2_act : WSTRING; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : WSTRING; (*Test data 2 of test case 2*)\n\tvTestCase3_act : WSTRING; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : WSTRING; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 42,\n\tName := 'assertNotEqual_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_TIME(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_TIME\n(*Collection of tests for assert function assertNotEqual_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_LTIME",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_LTIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 43,\n\tName := 'assertNotEqual_LTIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME(115.4);\n\tvTestCase1_xp := REAL_TO_LTIME(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LTIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LTIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_LTIME\n(*Collection of tests for assert function assertNotEqual_LTIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LTIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LTIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LTIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LTIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LTIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LTIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_DATE",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_DATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 44,\n\tName := 'assertNotEqual_DATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE(115.4);\n\tvTestCase1_xp := REAL_TO_DATE(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_DATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE(115.4);\n\tvTestCase2_xp := REAL_TO_DATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_DATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_DATE\n(*Collection of tests for assert function assertNotEqual_DATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DATE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DATE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DATE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DATE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DATE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DATE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_LDATE",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_LDATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 45,\n\tName := 'assertNotEqual_LDATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE(115.4);\n\tvTestCase1_xp := REAL_TO_LDATE(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LDATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LDATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_LDATE\n(*Collection of tests for assert function assertNotEqual_LDATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LDATE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LDATE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LDATE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LDATE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LDATE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LDATE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_DATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_DATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 46,\n\tName := 'assertNotEqual_DATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE_AND_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_DATE_AND_TIME(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_DATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE_AND_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_DATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_DATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_DATE_AND_TIME\n(*Collection of tests for assert function assertNotEqual_DATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DATE_AND_TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DATE_AND_TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DATE_AND_TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DATE_AND_TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DATE_AND_TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DATE_AND_TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_LDATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_LDATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 47,\n\tName := 'assertNotEqual_LDATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE_AND_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_LDATE_AND_TIME(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LDATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE_AND_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LDATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_LDATE_AND_TIME\n(*Collection of tests for assert function assertNotEqual_LDATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LDATE_AND_TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LDATE_AND_TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LDATE_AND_TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LDATE_AND_TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LDATE_AND_TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LDATE_AND_TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_TIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_TIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 48,\n\tName := 'assertNotEqual_TIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME_OF_DAY(115.4);\n\tvTestCase1_xp := REAL_TO_TIME_OF_DAY(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_TIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME_OF_DAY(115.4);\n\tvTestCase2_xp := REAL_TO_TIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_TIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_TIME_OF_DAY\n(*Collection of tests for assert function assertNotEqual_TIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : TIME_OF_DAY; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : TIME_OF_DAY; (*Test data 2 of test case 1*)\n\tvTestCase2_act : TIME_OF_DAY; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : TIME_OF_DAY; (*Test data 2 of test case 2*)\n\tvTestCase3_act : TIME_OF_DAY; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : TIME_OF_DAY; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertNotEqual_LTIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertNotEqual_LTIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 49,\n\tName := 'assertNotEqual_LTIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME_OF_DAY(115.4);\n\tvTestCase1_xp := REAL_TO_LTIME_OF_DAY(-85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LTIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME_OF_DAY(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LTIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertNotEqual_LTIME_OF_DAY\n(*Collection of tests for assert function assertNotEqual_LTIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LTIME_OF_DAY; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LTIME_OF_DAY; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LTIME_OF_DAY; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LTIME_OF_DAY; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LTIME_OF_DAY; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LTIME_OF_DAY; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_BYTE",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_BYTE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 50,\n\tName := 'assertGreater_BYTE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BYTE(115.4);\n\tvTestCase1_xp := REAL_TO_BYTE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_BYTE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BYTE(8.4);\n\tvTestCase2_xp := REAL_TO_BYTE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_BYTE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_BYTE\n(*Collection of tests for assert function assertGreater_BYTE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : BYTE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : BYTE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : BYTE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : BYTE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : BYTE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : BYTE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_WORD",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_WORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 51,\n\tName := 'assertGreater_WORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WORD(115.4);\n\tvTestCase1_xp := REAL_TO_WORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_WORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WORD(8.4);\n\tvTestCase2_xp := REAL_TO_WORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_WORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_WORD\n(*Collection of tests for assert function assertGreater_WORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : WORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : WORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : WORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : WORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : WORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : WORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_DWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_DWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 52,\n\tName := 'assertGreater_DWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DWORD(115.4);\n\tvTestCase1_xp := REAL_TO_DWORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_DWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DWORD(8.4);\n\tvTestCase2_xp := REAL_TO_DWORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_DWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_DWORD\n(*Collection of tests for assert function assertGreater_DWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DWORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DWORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DWORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DWORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DWORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DWORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_LWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_LWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 53,\n\tName := 'assertGreater_LWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LWORD(115.4);\n\tvTestCase1_xp := REAL_TO_LWORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LWORD(8.4);\n\tvTestCase2_xp := REAL_TO_LWORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_LWORD\n(*Collection of tests for assert function assertGreater_LWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LWORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LWORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LWORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LWORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LWORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LWORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_SINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_SINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 54,\n\tName := 'assertGreater_SINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_SINT(115.4);\n\tvTestCase1_xp := REAL_TO_SINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_SINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_SINT(8.4);\n\tvTestCase2_xp := REAL_TO_SINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_SINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_SINT\n(*Collection of tests for assert function assertGreater_SINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : SINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : SINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : SINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : SINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : SINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : SINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_USINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_USINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 55,\n\tName := 'assertGreater_USINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_USINT(115.4);\n\tvTestCase1_xp := REAL_TO_USINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_USINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_USINT(8.4);\n\tvTestCase2_xp := REAL_TO_USINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_USINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_USINT\n(*Collection of tests for assert function assertGreater_USINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : USINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : USINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : USINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : USINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : USINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : USINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_INT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_INT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 56,\n\tName := 'assertGreater_INT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_INT(115.4);\n\tvTestCase1_xp := REAL_TO_INT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_INT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_INT(8.4);\n\tvTestCase2_xp := REAL_TO_INT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_INT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_INT\n(*Collection of tests for assert function assertGreater_INT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : INT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : INT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : INT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : INT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : INT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : INT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_UINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_UINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 57,\n\tName := 'assertGreater_UINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UINT(115.4);\n\tvTestCase1_xp := REAL_TO_UINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_UINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UINT(8.4);\n\tvTestCase2_xp := REAL_TO_UINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_UINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_UINT\n(*Collection of tests for assert function assertGreater_UINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : UINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : UINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : UINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : UINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : UINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : UINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_DINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_DINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 58,\n\tName := 'assertGreater_DINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DINT(115.4);\n\tvTestCase1_xp := REAL_TO_DINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_DINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DINT(8.4);\n\tvTestCase2_xp := REAL_TO_DINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_DINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_DINT\n(*Collection of tests for assert function assertGreater_DINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_UDINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_UDINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 59,\n\tName := 'assertGreater_UDINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UDINT(115.4);\n\tvTestCase1_xp := REAL_TO_UDINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_UDINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UDINT(8.4);\n\tvTestCase2_xp := REAL_TO_UDINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_UDINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_UDINT\n(*Collection of tests for assert function assertGreater_UDINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : UDINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : UDINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : UDINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : UDINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : UDINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : UDINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_LINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_LINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 60,\n\tName := 'assertGreater_LINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LINT(115.4);\n\tvTestCase1_xp := REAL_TO_LINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LINT(8.4);\n\tvTestCase2_xp := REAL_TO_LINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_LINT\n(*Collection of tests for assert function assertGreater_LINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_ULINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_ULINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 61,\n\tName := 'assertGreater_ULINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_ULINT(115.4);\n\tvTestCase1_xp := REAL_TO_ULINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_ULINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_ULINT(8.4);\n\tvTestCase2_xp := REAL_TO_ULINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_ULINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_ULINT\n(*Collection of tests for assert function assertGreater_ULINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ULINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : ULINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : ULINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : ULINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : ULINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : ULINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_REAL",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_REAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 62,\n\tName := 'assertGreater_REAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_REAL(115.4);\n\tvTestCase1_xp := REAL_TO_REAL(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_REAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_REAL(8.4);\n\tvTestCase2_xp := REAL_TO_REAL(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_REAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_REAL\n(*Collection of tests for assert function assertGreater_REAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : REAL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : REAL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : REAL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : REAL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : REAL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : REAL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_LREAL",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_LREAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 63,\n\tName := 'assertGreater_LREAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LREAL(115.4);\n\tvTestCase1_xp := REAL_TO_LREAL(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LREAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LREAL(8.4);\n\tvTestCase2_xp := REAL_TO_LREAL(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LREAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_LREAL\n(*Collection of tests for assert function assertGreater_LREAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LREAL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LREAL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LREAL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LREAL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LREAL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LREAL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 64,\n\tName := 'assertGreater_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME(8.4);\n\tvTestCase2_xp := REAL_TO_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_TIME\n(*Collection of tests for assert function assertGreater_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_LTIME",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_LTIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 65,\n\tName := 'assertGreater_LTIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME(115.4);\n\tvTestCase1_xp := REAL_TO_LTIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LTIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME(8.4);\n\tvTestCase2_xp := REAL_TO_LTIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LTIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_LTIME\n(*Collection of tests for assert function assertGreater_LTIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LTIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LTIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LTIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LTIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LTIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LTIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_DATE",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_DATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 66,\n\tName := 'assertGreater_DATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE(115.4);\n\tvTestCase1_xp := REAL_TO_DATE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_DATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE(8.4);\n\tvTestCase2_xp := REAL_TO_DATE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_DATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_DATE\n(*Collection of tests for assert function assertGreater_DATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DATE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DATE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DATE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DATE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DATE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DATE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_LDATE",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_LDATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 67,\n\tName := 'assertGreater_LDATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE(115.4);\n\tvTestCase1_xp := REAL_TO_LDATE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LDATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE(8.4);\n\tvTestCase2_xp := REAL_TO_LDATE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LDATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_LDATE\n(*Collection of tests for assert function assertGreater_LDATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LDATE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LDATE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LDATE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LDATE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LDATE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LDATE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_DATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_DATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 68,\n\tName := 'assertGreater_DATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE_AND_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_DATE_AND_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_DATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE_AND_TIME(8.4);\n\tvTestCase2_xp := REAL_TO_DATE_AND_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_DATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_DATE_AND_TIME\n(*Collection of tests for assert function assertGreater_DATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DATE_AND_TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DATE_AND_TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DATE_AND_TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DATE_AND_TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DATE_AND_TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DATE_AND_TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_LDATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_LDATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 69,\n\tName := 'assertGreater_LDATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE_AND_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_LDATE_AND_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LDATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE_AND_TIME(8.4);\n\tvTestCase2_xp := REAL_TO_LDATE_AND_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LDATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_LDATE_AND_TIME\n(*Collection of tests for assert function assertGreater_LDATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LDATE_AND_TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LDATE_AND_TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LDATE_AND_TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LDATE_AND_TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LDATE_AND_TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LDATE_AND_TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_TIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_TIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 70,\n\tName := 'assertGreater_TIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME_OF_DAY(115.4);\n\tvTestCase1_xp := REAL_TO_TIME_OF_DAY(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_TIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME_OF_DAY(8.4);\n\tvTestCase2_xp := REAL_TO_TIME_OF_DAY(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_TIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_TIME_OF_DAY\n(*Collection of tests for assert function assertGreater_TIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : TIME_OF_DAY; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : TIME_OF_DAY; (*Test data 2 of test case 1*)\n\tvTestCase2_act : TIME_OF_DAY; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : TIME_OF_DAY; (*Test data 2 of test case 2*)\n\tvTestCase3_act : TIME_OF_DAY; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : TIME_OF_DAY; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreater_LTIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertGreater_LTIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 71,\n\tName := 'assertGreater_LTIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME_OF_DAY(115.4);\n\tvTestCase1_xp := REAL_TO_LTIME_OF_DAY(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LTIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME_OF_DAY(8.4);\n\tvTestCase2_xp := REAL_TO_LTIME_OF_DAY(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LTIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreater_LTIME_OF_DAY\n(*Collection of tests for assert function assertGreater_LTIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LTIME_OF_DAY; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LTIME_OF_DAY; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LTIME_OF_DAY; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LTIME_OF_DAY; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LTIME_OF_DAY; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LTIME_OF_DAY; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_BYTE",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_BYTE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 72,\n\tName := 'assertGreaterEqual_BYTE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BYTE(115.4);\n\tvTestCase1_xp := REAL_TO_BYTE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_BYTE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BYTE(115.4);\n\tvTestCase2_xp := REAL_TO_BYTE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_BYTE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_BYTE(85.4);\n\tvTestCase3_xp := REAL_TO_BYTE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_BYTE(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_BYTE\n(*Collection of tests for assert function assertGreaterEqual_BYTE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : BYTE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : BYTE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : BYTE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : BYTE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : BYTE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : BYTE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_WORD",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_WORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 73,\n\tName := 'assertGreaterEqual_WORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WORD(115.4);\n\tvTestCase1_xp := REAL_TO_WORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_WORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WORD(115.4);\n\tvTestCase2_xp := REAL_TO_WORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_WORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_WORD(85.4);\n\tvTestCase3_xp := REAL_TO_WORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_WORD(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_WORD\n(*Collection of tests for assert function assertGreaterEqual_WORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : WORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : WORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : WORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : WORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : WORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : WORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_DWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_DWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 74,\n\tName := 'assertGreaterEqual_DWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DWORD(115.4);\n\tvTestCase1_xp := REAL_TO_DWORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DWORD(115.4);\n\tvTestCase2_xp := REAL_TO_DWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DWORD(85.4);\n\tvTestCase3_xp := REAL_TO_DWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DWORD(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_DWORD\n(*Collection of tests for assert function assertGreaterEqual_DWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DWORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DWORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DWORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DWORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DWORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DWORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_LWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_LWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 75,\n\tName := 'assertGreaterEqual_LWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LWORD(115.4);\n\tvTestCase1_xp := REAL_TO_LWORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LWORD(115.4);\n\tvTestCase2_xp := REAL_TO_LWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LWORD(85.4);\n\tvTestCase3_xp := REAL_TO_LWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LWORD(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_LWORD\n(*Collection of tests for assert function assertGreaterEqual_LWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LWORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LWORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LWORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LWORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LWORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LWORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_SINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_SINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 76,\n\tName := 'assertGreaterEqual_SINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_SINT(115.4);\n\tvTestCase1_xp := REAL_TO_SINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_SINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_SINT(115.4);\n\tvTestCase2_xp := REAL_TO_SINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_SINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_SINT(85.4);\n\tvTestCase3_xp := REAL_TO_SINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_SINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_SINT\n(*Collection of tests for assert function assertGreaterEqual_SINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : SINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : SINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : SINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : SINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : SINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : SINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_USINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_USINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 77,\n\tName := 'assertGreaterEqual_USINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_USINT(115.4);\n\tvTestCase1_xp := REAL_TO_USINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_USINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_USINT(115.4);\n\tvTestCase2_xp := REAL_TO_USINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_USINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_USINT(85.4);\n\tvTestCase3_xp := REAL_TO_USINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_USINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_USINT\n(*Collection of tests for assert function assertGreaterEqual_USINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : USINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : USINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : USINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : USINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : USINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : USINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_INT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_INT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 78,\n\tName := 'assertGreaterEqual_INT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_INT(115.4);\n\tvTestCase1_xp := REAL_TO_INT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_INT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_INT(115.4);\n\tvTestCase2_xp := REAL_TO_INT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_INT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_INT(85.4);\n\tvTestCase3_xp := REAL_TO_INT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_INT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_INT\n(*Collection of tests for assert function assertGreaterEqual_INT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : INT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : INT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : INT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : INT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : INT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : INT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_UINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_UINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 79,\n\tName := 'assertGreaterEqual_UINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UINT(115.4);\n\tvTestCase1_xp := REAL_TO_UINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_UINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UINT(115.4);\n\tvTestCase2_xp := REAL_TO_UINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_UINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_UINT(85.4);\n\tvTestCase3_xp := REAL_TO_UINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_UINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_UINT\n(*Collection of tests for assert function assertGreaterEqual_UINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : UINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : UINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : UINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : UINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : UINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : UINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_DINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_DINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 80,\n\tName := 'assertGreaterEqual_DINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DINT(115.4);\n\tvTestCase1_xp := REAL_TO_DINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DINT(115.4);\n\tvTestCase2_xp := REAL_TO_DINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DINT(85.4);\n\tvTestCase3_xp := REAL_TO_DINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_DINT\n(*Collection of tests for assert function assertGreaterEqual_DINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_UDINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_UDINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 81,\n\tName := 'assertGreaterEqual_UDINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UDINT(115.4);\n\tvTestCase1_xp := REAL_TO_UDINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_UDINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UDINT(115.4);\n\tvTestCase2_xp := REAL_TO_UDINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_UDINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_UDINT(85.4);\n\tvTestCase3_xp := REAL_TO_UDINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_UDINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_UDINT\n(*Collection of tests for assert function assertGreaterEqual_UDINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : UDINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : UDINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : UDINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : UDINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : UDINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : UDINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_LINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_LINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 82,\n\tName := 'assertGreaterEqual_LINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LINT(115.4);\n\tvTestCase1_xp := REAL_TO_LINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LINT(115.4);\n\tvTestCase2_xp := REAL_TO_LINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LINT(85.4);\n\tvTestCase3_xp := REAL_TO_LINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_LINT\n(*Collection of tests for assert function assertGreaterEqual_LINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_ULINT",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_ULINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 83,\n\tName := 'assertGreaterEqual_ULINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_ULINT(115.4);\n\tvTestCase1_xp := REAL_TO_ULINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_ULINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_ULINT(115.4);\n\tvTestCase2_xp := REAL_TO_ULINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_ULINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_ULINT(85.4);\n\tvTestCase3_xp := REAL_TO_ULINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_ULINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_ULINT\n(*Collection of tests for assert function assertGreaterEqual_ULINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ULINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : ULINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : ULINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : ULINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : ULINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : ULINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_REAL",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_REAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 84,\n\tName := 'assertGreaterEqual_REAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_REAL(115.4);\n\tvTestCase1_xp := REAL_TO_REAL(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_REAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_REAL(115.4);\n\tvTestCase2_xp := REAL_TO_REAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_REAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_REAL(85.4);\n\tvTestCase3_xp := REAL_TO_REAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_REAL(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_REAL\n(*Collection of tests for assert function assertGreaterEqual_REAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : REAL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : REAL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : REAL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : REAL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : REAL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : REAL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_LREAL",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_LREAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 85,\n\tName := 'assertGreaterEqual_LREAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LREAL(115.4);\n\tvTestCase1_xp := REAL_TO_LREAL(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LREAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LREAL(115.4);\n\tvTestCase2_xp := REAL_TO_LREAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LREAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LREAL(85.4);\n\tvTestCase3_xp := REAL_TO_LREAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LREAL(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_LREAL\n(*Collection of tests for assert function assertGreaterEqual_LREAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LREAL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LREAL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LREAL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LREAL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LREAL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LREAL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 86,\n\tName := 'assertGreaterEqual_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_TIME(85.4);\n\tvTestCase3_xp := REAL_TO_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_TIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_TIME\n(*Collection of tests for assert function assertGreaterEqual_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_LTIME",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_LTIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 87,\n\tName := 'assertGreaterEqual_LTIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME(115.4);\n\tvTestCase1_xp := REAL_TO_LTIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LTIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LTIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LTIME(85.4);\n\tvTestCase3_xp := REAL_TO_LTIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LTIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_LTIME\n(*Collection of tests for assert function assertGreaterEqual_LTIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LTIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LTIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LTIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LTIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LTIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LTIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_DATE",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_DATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 88,\n\tName := 'assertGreaterEqual_DATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE(115.4);\n\tvTestCase1_xp := REAL_TO_DATE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE(115.4);\n\tvTestCase2_xp := REAL_TO_DATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DATE(85.4);\n\tvTestCase3_xp := REAL_TO_DATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DATE(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_DATE\n(*Collection of tests for assert function assertGreaterEqual_DATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DATE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DATE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DATE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DATE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DATE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DATE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_LDATE",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_LDATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 89,\n\tName := 'assertGreaterEqual_LDATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE(115.4);\n\tvTestCase1_xp := REAL_TO_LDATE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LDATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LDATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LDATE(85.4);\n\tvTestCase3_xp := REAL_TO_LDATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LDATE(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_LDATE\n(*Collection of tests for assert function assertGreaterEqual_LDATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LDATE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LDATE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LDATE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LDATE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LDATE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LDATE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_DATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_DATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 90,\n\tName := 'assertGreaterEqual_DATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE_AND_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_DATE_AND_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE_AND_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_DATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DATE_AND_TIME(85.4);\n\tvTestCase3_xp := REAL_TO_DATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DATE_AND_TIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_DATE_AND_TIME\n(*Collection of tests for assert function assertGreaterEqual_DATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DATE_AND_TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DATE_AND_TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DATE_AND_TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DATE_AND_TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DATE_AND_TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DATE_AND_TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_LDATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_LDATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 91,\n\tName := 'assertGreaterEqual_LDATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE_AND_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_LDATE_AND_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LDATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE_AND_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LDATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LDATE_AND_TIME(85.4);\n\tvTestCase3_xp := REAL_TO_LDATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LDATE_AND_TIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_LDATE_AND_TIME\n(*Collection of tests for assert function assertGreaterEqual_LDATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LDATE_AND_TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LDATE_AND_TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LDATE_AND_TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LDATE_AND_TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LDATE_AND_TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LDATE_AND_TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_TIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_TIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 92,\n\tName := 'assertGreaterEqual_TIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME_OF_DAY(115.4);\n\tvTestCase1_xp := REAL_TO_TIME_OF_DAY(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_TIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME_OF_DAY(115.4);\n\tvTestCase2_xp := REAL_TO_TIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_TIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_TIME_OF_DAY(85.4);\n\tvTestCase3_xp := REAL_TO_TIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_TIME_OF_DAY(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_TIME_OF_DAY\n(*Collection of tests for assert function assertGreaterEqual_TIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : TIME_OF_DAY; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : TIME_OF_DAY; (*Test data 2 of test case 1*)\n\tvTestCase2_act : TIME_OF_DAY; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : TIME_OF_DAY; (*Test data 2 of test case 2*)\n\tvTestCase3_act : TIME_OF_DAY; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : TIME_OF_DAY; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertGreaterEqual_LTIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertGreaterEqual_LTIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 93,\n\tName := 'assertGreaterEqual_LTIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME_OF_DAY(115.4);\n\tvTestCase1_xp := REAL_TO_LTIME_OF_DAY(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LTIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME_OF_DAY(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LTIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LTIME_OF_DAY(85.4);\n\tvTestCase3_xp := REAL_TO_LTIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LTIME_OF_DAY(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertGreaterEqual_LTIME_OF_DAY\n(*Collection of tests for assert function assertGreaterEqual_LTIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LTIME_OF_DAY; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LTIME_OF_DAY; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LTIME_OF_DAY; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LTIME_OF_DAY; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LTIME_OF_DAY; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LTIME_OF_DAY; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_BYTE",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_BYTE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 94,\n\tName := 'assertLess_BYTE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BYTE(85.4);\n\tvTestCase1_xp := REAL_TO_BYTE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_BYTE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BYTE(115.4);\n\tvTestCase2_xp := REAL_TO_BYTE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_BYTE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_BYTE\n(*Collection of tests for assert function assertLess_BYTE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : BYTE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : BYTE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : BYTE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : BYTE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : BYTE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : BYTE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_WORD",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_WORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 95,\n\tName := 'assertLess_WORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WORD(85.4);\n\tvTestCase1_xp := REAL_TO_WORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_WORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WORD(115.4);\n\tvTestCase2_xp := REAL_TO_WORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_WORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_WORD\n(*Collection of tests for assert function assertLess_WORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : WORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : WORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : WORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : WORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : WORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : WORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_DWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_DWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 96,\n\tName := 'assertLess_DWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DWORD(85.4);\n\tvTestCase1_xp := REAL_TO_DWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_DWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DWORD(115.4);\n\tvTestCase2_xp := REAL_TO_DWORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_DWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_DWORD\n(*Collection of tests for assert function assertLess_DWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DWORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DWORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DWORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DWORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DWORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DWORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_LWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_LWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 97,\n\tName := 'assertLess_LWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LWORD(85.4);\n\tvTestCase1_xp := REAL_TO_LWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LWORD(115.4);\n\tvTestCase2_xp := REAL_TO_LWORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_LWORD\n(*Collection of tests for assert function assertLess_LWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LWORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LWORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LWORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LWORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LWORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LWORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_SINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_SINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 98,\n\tName := 'assertLess_SINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_SINT(85.4);\n\tvTestCase1_xp := REAL_TO_SINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_SINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_SINT(115.4);\n\tvTestCase2_xp := REAL_TO_SINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_SINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_SINT\n(*Collection of tests for assert function assertLess_SINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : SINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : SINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : SINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : SINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : SINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : SINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_USINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_USINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 99,\n\tName := 'assertLess_USINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_USINT(85.4);\n\tvTestCase1_xp := REAL_TO_USINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_USINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_USINT(115.4);\n\tvTestCase2_xp := REAL_TO_USINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_USINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_USINT\n(*Collection of tests for assert function assertLess_USINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : USINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : USINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : USINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : USINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : USINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : USINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_INT",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_INT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 100,\n\tName := 'assertLess_INT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_INT(85.4);\n\tvTestCase1_xp := REAL_TO_INT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_INT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_INT(115.4);\n\tvTestCase2_xp := REAL_TO_INT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_INT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_INT\n(*Collection of tests for assert function assertLess_INT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : INT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : INT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : INT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : INT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : INT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : INT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_UINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_UINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 101,\n\tName := 'assertLess_UINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UINT(85.4);\n\tvTestCase1_xp := REAL_TO_UINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_UINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UINT(115.4);\n\tvTestCase2_xp := REAL_TO_UINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_UINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_UINT\n(*Collection of tests for assert function assertLess_UINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : UINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : UINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : UINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : UINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : UINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : UINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_DINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_DINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 102,\n\tName := 'assertLess_DINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DINT(85.4);\n\tvTestCase1_xp := REAL_TO_DINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_DINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DINT(115.4);\n\tvTestCase2_xp := REAL_TO_DINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_DINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_DINT\n(*Collection of tests for assert function assertLess_DINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_UDINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_UDINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 103,\n\tName := 'assertLess_UDINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UDINT(85.4);\n\tvTestCase1_xp := REAL_TO_UDINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_UDINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UDINT(115.4);\n\tvTestCase2_xp := REAL_TO_UDINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_UDINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_UDINT\n(*Collection of tests for assert function assertLess_UDINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : UDINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : UDINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : UDINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : UDINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : UDINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : UDINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_LINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_LINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 104,\n\tName := 'assertLess_LINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LINT(85.4);\n\tvTestCase1_xp := REAL_TO_LINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LINT(115.4);\n\tvTestCase2_xp := REAL_TO_LINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_LINT\n(*Collection of tests for assert function assertLess_LINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_ULINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_ULINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 105,\n\tName := 'assertLess_ULINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_ULINT(85.4);\n\tvTestCase1_xp := REAL_TO_ULINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_ULINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_ULINT(115.4);\n\tvTestCase2_xp := REAL_TO_ULINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_ULINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_ULINT\n(*Collection of tests for assert function assertLess_ULINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ULINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : ULINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : ULINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : ULINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : ULINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : ULINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_REAL",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_REAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 106,\n\tName := 'assertLess_REAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_REAL(85.4);\n\tvTestCase1_xp := REAL_TO_REAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_REAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_REAL(115.4);\n\tvTestCase2_xp := REAL_TO_REAL(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_REAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_REAL\n(*Collection of tests for assert function assertLess_REAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : REAL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : REAL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : REAL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : REAL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : REAL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : REAL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_LREAL",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_LREAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 107,\n\tName := 'assertLess_LREAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LREAL(85.4);\n\tvTestCase1_xp := REAL_TO_LREAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LREAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LREAL(115.4);\n\tvTestCase2_xp := REAL_TO_LREAL(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LREAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_LREAL\n(*Collection of tests for assert function assertLess_LREAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LREAL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LREAL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LREAL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LREAL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LREAL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LREAL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 108,\n\tName := 'assertLess_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME(85.4);\n\tvTestCase1_xp := REAL_TO_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_TIME\n(*Collection of tests for assert function assertLess_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_LTIME",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_LTIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 109,\n\tName := 'assertLess_LTIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME(85.4);\n\tvTestCase1_xp := REAL_TO_LTIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LTIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LTIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_LTIME\n(*Collection of tests for assert function assertLess_LTIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LTIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LTIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LTIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LTIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LTIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LTIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_DATE",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_DATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 110,\n\tName := 'assertLess_DATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE(85.4);\n\tvTestCase1_xp := REAL_TO_DATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_DATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE(115.4);\n\tvTestCase2_xp := REAL_TO_DATE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_DATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_DATE\n(*Collection of tests for assert function assertLess_DATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DATE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DATE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DATE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DATE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DATE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DATE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_LDATE",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_LDATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 111,\n\tName := 'assertLess_LDATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE(85.4);\n\tvTestCase1_xp := REAL_TO_LDATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LDATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LDATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_LDATE\n(*Collection of tests for assert function assertLess_LDATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LDATE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LDATE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LDATE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LDATE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LDATE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LDATE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_DATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_DATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 112,\n\tName := 'assertLess_DATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE_AND_TIME(85.4);\n\tvTestCase1_xp := REAL_TO_DATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_DATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE_AND_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_DATE_AND_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_DATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_DATE_AND_TIME\n(*Collection of tests for assert function assertLess_DATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DATE_AND_TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DATE_AND_TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DATE_AND_TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DATE_AND_TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DATE_AND_TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DATE_AND_TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_LDATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_LDATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 113,\n\tName := 'assertLess_LDATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE_AND_TIME(85.4);\n\tvTestCase1_xp := REAL_TO_LDATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LDATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE_AND_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE_AND_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LDATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_LDATE_AND_TIME\n(*Collection of tests for assert function assertLess_LDATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LDATE_AND_TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LDATE_AND_TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LDATE_AND_TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LDATE_AND_TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LDATE_AND_TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LDATE_AND_TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_TIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_TIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 114,\n\tName := 'assertLess_TIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME_OF_DAY(85.4);\n\tvTestCase1_xp := REAL_TO_TIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_TIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME_OF_DAY(115.4);\n\tvTestCase2_xp := REAL_TO_TIME_OF_DAY(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_TIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_TIME_OF_DAY\n(*Collection of tests for assert function assertLess_TIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : TIME_OF_DAY; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : TIME_OF_DAY; (*Test data 2 of test case 1*)\n\tvTestCase2_act : TIME_OF_DAY; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : TIME_OF_DAY; (*Test data 2 of test case 2*)\n\tvTestCase3_act : TIME_OF_DAY; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : TIME_OF_DAY; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLess_LTIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertLess_LTIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 115,\n\tName := 'assertLess_LTIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME_OF_DAY(85.4);\n\tvTestCase1_xp := REAL_TO_LTIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LTIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME_OF_DAY(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME_OF_DAY(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LTIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLess_LTIME_OF_DAY\n(*Collection of tests for assert function assertLess_LTIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LTIME_OF_DAY; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LTIME_OF_DAY; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LTIME_OF_DAY; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LTIME_OF_DAY; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LTIME_OF_DAY; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LTIME_OF_DAY; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_BYTE",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_BYTE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 116,\n\tName := 'assertLessEqual_BYTE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BYTE(85.4);\n\tvTestCase1_xp := REAL_TO_BYTE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_BYTE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BYTE(115.4);\n\tvTestCase2_xp := REAL_TO_BYTE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_BYTE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_BYTE(115.4);\n\tvTestCase3_xp := REAL_TO_BYTE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_BYTE(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_BYTE\n(*Collection of tests for assert function assertLessEqual_BYTE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : BYTE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : BYTE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : BYTE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : BYTE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : BYTE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : BYTE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_WORD",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_WORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 117,\n\tName := 'assertLessEqual_WORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WORD(85.4);\n\tvTestCase1_xp := REAL_TO_WORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_WORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WORD(115.4);\n\tvTestCase2_xp := REAL_TO_WORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_WORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_WORD(115.4);\n\tvTestCase3_xp := REAL_TO_WORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_WORD(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_WORD\n(*Collection of tests for assert function assertLessEqual_WORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : WORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : WORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : WORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : WORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : WORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : WORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_DWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_DWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 118,\n\tName := 'assertLessEqual_DWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DWORD(85.4);\n\tvTestCase1_xp := REAL_TO_DWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DWORD(115.4);\n\tvTestCase2_xp := REAL_TO_DWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DWORD(115.4);\n\tvTestCase3_xp := REAL_TO_DWORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DWORD(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_DWORD\n(*Collection of tests for assert function assertLessEqual_DWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DWORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DWORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DWORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DWORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DWORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DWORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_LWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_LWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 119,\n\tName := 'assertLessEqual_LWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LWORD(85.4);\n\tvTestCase1_xp := REAL_TO_LWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LWORD(115.4);\n\tvTestCase2_xp := REAL_TO_LWORD(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LWORD(115.4);\n\tvTestCase3_xp := REAL_TO_LWORD(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LWORD(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_LWORD\n(*Collection of tests for assert function assertLessEqual_LWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LWORD; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LWORD; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LWORD; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LWORD; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LWORD; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LWORD; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_SINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_SINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 120,\n\tName := 'assertLessEqual_SINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_SINT(85.4);\n\tvTestCase1_xp := REAL_TO_SINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_SINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_SINT(115.4);\n\tvTestCase2_xp := REAL_TO_SINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_SINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_SINT(115.4);\n\tvTestCase3_xp := REAL_TO_SINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_SINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_SINT\n(*Collection of tests for assert function assertLessEqual_SINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : SINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : SINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : SINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : SINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : SINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : SINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_USINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_USINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 121,\n\tName := 'assertLessEqual_USINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_USINT(85.4);\n\tvTestCase1_xp := REAL_TO_USINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_USINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_USINT(115.4);\n\tvTestCase2_xp := REAL_TO_USINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_USINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_USINT(115.4);\n\tvTestCase3_xp := REAL_TO_USINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_USINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_USINT\n(*Collection of tests for assert function assertLessEqual_USINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : USINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : USINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : USINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : USINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : USINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : USINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_INT",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_INT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "INT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 122,\n\tName := 'assertLessEqual_INT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_INT(85.4);\n\tvTestCase1_xp := REAL_TO_INT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_INT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_INT(115.4);\n\tvTestCase2_xp := REAL_TO_INT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_INT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_INT(115.4);\n\tvTestCase3_xp := REAL_TO_INT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_INT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_INT\n(*Collection of tests for assert function assertLessEqual_INT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : INT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : INT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : INT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : INT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : INT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : INT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_UINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_UINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 123,\n\tName := 'assertLessEqual_UINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UINT(85.4);\n\tvTestCase1_xp := REAL_TO_UINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_UINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UINT(115.4);\n\tvTestCase2_xp := REAL_TO_UINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_UINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_UINT(115.4);\n\tvTestCase3_xp := REAL_TO_UINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_UINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_UINT\n(*Collection of tests for assert function assertLessEqual_UINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : UINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : UINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : UINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : UINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : UINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : UINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_DINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_DINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 124,\n\tName := 'assertLessEqual_DINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DINT(85.4);\n\tvTestCase1_xp := REAL_TO_DINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DINT(115.4);\n\tvTestCase2_xp := REAL_TO_DINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DINT(115.4);\n\tvTestCase3_xp := REAL_TO_DINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_DINT\n(*Collection of tests for assert function assertLessEqual_DINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_UDINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_UDINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 125,\n\tName := 'assertLessEqual_UDINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UDINT(85.4);\n\tvTestCase1_xp := REAL_TO_UDINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_UDINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UDINT(115.4);\n\tvTestCase2_xp := REAL_TO_UDINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_UDINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_UDINT(115.4);\n\tvTestCase3_xp := REAL_TO_UDINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_UDINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_UDINT\n(*Collection of tests for assert function assertLessEqual_UDINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : UDINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : UDINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : UDINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : UDINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : UDINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : UDINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_LINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_LINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 126,\n\tName := 'assertLessEqual_LINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LINT(85.4);\n\tvTestCase1_xp := REAL_TO_LINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LINT(115.4);\n\tvTestCase2_xp := REAL_TO_LINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LINT(115.4);\n\tvTestCase3_xp := REAL_TO_LINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_LINT\n(*Collection of tests for assert function assertLessEqual_LINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_ULINT",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_ULINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 127,\n\tName := 'assertLessEqual_ULINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_ULINT(85.4);\n\tvTestCase1_xp := REAL_TO_ULINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_ULINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_ULINT(115.4);\n\tvTestCase2_xp := REAL_TO_ULINT(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_ULINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_ULINT(115.4);\n\tvTestCase3_xp := REAL_TO_ULINT(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_ULINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_ULINT\n(*Collection of tests for assert function assertLessEqual_ULINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ULINT; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : ULINT; (*Test data 2 of test case 1*)\n\tvTestCase2_act : ULINT; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : ULINT; (*Test data 2 of test case 2*)\n\tvTestCase3_act : ULINT; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : ULINT; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_REAL",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_REAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 128,\n\tName := 'assertLessEqual_REAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_REAL(85.4);\n\tvTestCase1_xp := REAL_TO_REAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_REAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_REAL(115.4);\n\tvTestCase2_xp := REAL_TO_REAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_REAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_REAL(115.4);\n\tvTestCase3_xp := REAL_TO_REAL(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_REAL(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_REAL\n(*Collection of tests for assert function assertLessEqual_REAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : REAL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : REAL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : REAL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : REAL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : REAL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : REAL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_LREAL",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_LREAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 129,\n\tName := 'assertLessEqual_LREAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LREAL(85.4);\n\tvTestCase1_xp := REAL_TO_LREAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LREAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LREAL(115.4);\n\tvTestCase2_xp := REAL_TO_LREAL(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LREAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LREAL(115.4);\n\tvTestCase3_xp := REAL_TO_LREAL(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LREAL(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_LREAL\n(*Collection of tests for assert function assertLessEqual_LREAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LREAL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LREAL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LREAL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LREAL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LREAL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LREAL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 130,\n\tName := 'assertLessEqual_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME(85.4);\n\tvTestCase1_xp := REAL_TO_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_TIME(115.4);\n\tvTestCase3_xp := REAL_TO_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_TIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_TIME\n(*Collection of tests for assert function assertLessEqual_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_LTIME",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_LTIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 131,\n\tName := 'assertLessEqual_LTIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME(85.4);\n\tvTestCase1_xp := REAL_TO_LTIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LTIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LTIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LTIME(115.4);\n\tvTestCase3_xp := REAL_TO_LTIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LTIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_LTIME\n(*Collection of tests for assert function assertLessEqual_LTIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LTIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LTIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LTIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LTIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LTIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LTIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_DATE",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_DATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 132,\n\tName := 'assertLessEqual_DATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE(85.4);\n\tvTestCase1_xp := REAL_TO_DATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE(115.4);\n\tvTestCase2_xp := REAL_TO_DATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DATE(115.4);\n\tvTestCase3_xp := REAL_TO_DATE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DATE(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_DATE\n(*Collection of tests for assert function assertLessEqual_DATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DATE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DATE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DATE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DATE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DATE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DATE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_LDATE",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_LDATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 133,\n\tName := 'assertLessEqual_LDATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE(85.4);\n\tvTestCase1_xp := REAL_TO_LDATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LDATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LDATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LDATE(115.4);\n\tvTestCase3_xp := REAL_TO_LDATE(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LDATE(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_LDATE\n(*Collection of tests for assert function assertLessEqual_LDATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LDATE; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LDATE; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LDATE; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LDATE; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LDATE; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LDATE; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_DATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_DATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 134,\n\tName := 'assertLessEqual_DATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE_AND_TIME(85.4);\n\tvTestCase1_xp := REAL_TO_DATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE_AND_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_DATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DATE_AND_TIME(115.4);\n\tvTestCase3_xp := REAL_TO_DATE_AND_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DATE_AND_TIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_DATE_AND_TIME\n(*Collection of tests for assert function assertLessEqual_DATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : DATE_AND_TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : DATE_AND_TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : DATE_AND_TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : DATE_AND_TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : DATE_AND_TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : DATE_AND_TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_LDATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_LDATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 135,\n\tName := 'assertLessEqual_LDATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE_AND_TIME(85.4);\n\tvTestCase1_xp := REAL_TO_LDATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LDATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE_AND_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE_AND_TIME(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LDATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LDATE_AND_TIME(115.4);\n\tvTestCase3_xp := REAL_TO_LDATE_AND_TIME(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LDATE_AND_TIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_LDATE_AND_TIME\n(*Collection of tests for assert function assertLessEqual_LDATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LDATE_AND_TIME; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LDATE_AND_TIME; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LDATE_AND_TIME; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LDATE_AND_TIME; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LDATE_AND_TIME; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LDATE_AND_TIME; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_TIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_TIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 136,\n\tName := 'assertLessEqual_TIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME_OF_DAY(85.4);\n\tvTestCase1_xp := REAL_TO_TIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_TIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME_OF_DAY(115.4);\n\tvTestCase2_xp := REAL_TO_TIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_TIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_TIME_OF_DAY(115.4);\n\tvTestCase3_xp := REAL_TO_TIME_OF_DAY(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_TIME_OF_DAY(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_TIME_OF_DAY\n(*Collection of tests for assert function assertLessEqual_TIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : TIME_OF_DAY; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : TIME_OF_DAY; (*Test data 2 of test case 1*)\n\tvTestCase2_act : TIME_OF_DAY; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : TIME_OF_DAY; (*Test data 2 of test case 2*)\n\tvTestCase3_act : TIME_OF_DAY; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : TIME_OF_DAY; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertLessEqual_LTIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertLessEqual_LTIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 137,\n\tName := 'assertLessEqual_LTIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME_OF_DAY(85.4);\n\tvTestCase1_xp := REAL_TO_LTIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LTIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME_OF_DAY(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME_OF_DAY(115.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LTIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_SETUP",
          "code": "IF vTestCases[2].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LTIME_OF_DAY(115.4);\n\tvTestCase3_xp := REAL_TO_LTIME_OF_DAY(85.4);\nEND_IF"
        },
        {
          "name": "TEST_CASE_3_EXEC",
          "code": "IF vTestCases[2].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LTIME_OF_DAY(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertLessEqual_LTIME_OF_DAY\n(*Collection of tests for assert function assertLessEqual_LTIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : LTIME_OF_DAY; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : LTIME_OF_DAY; (*Test data 2 of test case 1*)\n\tvTestCase2_act : LTIME_OF_DAY; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : LTIME_OF_DAY; (*Test data 2 of test case 2*)\n\tvTestCase3_act : LTIME_OF_DAY; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : LTIME_OF_DAY; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_BOOL",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_BOOL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 138,\n\tName := 'assertArrayEqual_BOOL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_BOOL(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_BOOL(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_BOOL(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_BOOL(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_BOOL(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_BOOL(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_BOOL\n(*Collection of tests for assert function assertArrayEqual_BOOL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF BOOL; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF BOOL; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF BOOL; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF BOOL; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_BYTE",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_BYTE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF BYTE",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 139,\n\tName := 'assertArrayEqual_BYTE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_BYTE(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_BYTE(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_BYTE(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_BYTE(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_BYTE(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_BYTE(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_BYTE\n(*Collection of tests for assert function assertArrayEqual_BYTE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF BYTE; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF BYTE; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF BYTE; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF BYTE; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_WORD",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_WORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF WORD",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 140,\n\tName := 'assertArrayEqual_WORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_WORD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_WORD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_WORD(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_WORD(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_WORD(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_WORD(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_WORD\n(*Collection of tests for assert function assertArrayEqual_WORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF WORD; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF WORD; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF WORD; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF WORD; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_DWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_DWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF DWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 141,\n\tName := 'assertArrayEqual_DWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_DWORD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_DWORD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_DWORD(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_DWORD(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_DWORD(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_DWORD(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_DWORD\n(*Collection of tests for assert function assertArrayEqual_DWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF DWORD; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF DWORD; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF DWORD; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF DWORD; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_LWORD",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_LWORD",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF LWORD",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 142,\n\tName := 'assertArrayEqual_LWORD',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LWORD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LWORD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LWORD(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LWORD(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LWORD(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LWORD(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_LWORD\n(*Collection of tests for assert function assertArrayEqual_LWORD*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF LWORD; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF LWORD; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF LWORD; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF LWORD; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_SINT",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_SINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF SINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 143,\n\tName := 'assertArrayEqual_SINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_SINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_SINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_SINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_SINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_SINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_SINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_SINT\n(*Collection of tests for assert function assertArrayEqual_SINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF SINT; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF SINT; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF SINT; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF SINT; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_USINT",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_USINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF USINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 144,\n\tName := 'assertArrayEqual_USINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_USINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_USINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_USINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_USINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_USINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_USINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_USINT\n(*Collection of tests for assert function assertArrayEqual_USINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF USINT; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF USINT; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF USINT; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF USINT; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_INT",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_INT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF INT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF INT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF INT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF INT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 145,\n\tName := 'assertArrayEqual_INT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_INT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_INT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_INT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_INT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_INT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_INT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_INT\n(*Collection of tests for assert function assertArrayEqual_INT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF INT; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF INT; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF INT; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF INT; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_UINT",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_UINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 146,\n\tName := 'assertArrayEqual_UINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_UINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_UINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_UINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_UINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_UINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_UINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_UINT\n(*Collection of tests for assert function assertArrayEqual_UINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF UINT; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF UINT; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF UINT; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF UINT; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_DINT",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_DINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF DINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 147,\n\tName := 'assertArrayEqual_DINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_DINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_DINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_DINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_DINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_DINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_DINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_DINT\n(*Collection of tests for assert function assertArrayEqual_DINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF DINT; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF DINT; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF DINT; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF DINT; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_UDINT",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_UDINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF UDINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 148,\n\tName := 'assertArrayEqual_UDINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_UDINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_UDINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_UDINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_UDINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_UDINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_UDINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_UDINT\n(*Collection of tests for assert function assertArrayEqual_UDINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF UDINT; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF UDINT; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF UDINT; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF UDINT; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_LINT",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_LINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF LINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 149,\n\tName := 'assertArrayEqual_LINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_LINT\n(*Collection of tests for assert function assertArrayEqual_LINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF LINT; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF LINT; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF LINT; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF LINT; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_ULINT",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_ULINT",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF ULINT",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 150,\n\tName := 'assertArrayEqual_ULINT',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_ULINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_ULINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_ULINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_ULINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_ULINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_ULINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_ULINT\n(*Collection of tests for assert function assertArrayEqual_ULINT*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF ULINT; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF ULINT; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF ULINT; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF ULINT; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_REAL",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_REAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 151,\n\tName := 'assertArrayEqual_REAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_REAL(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_REAL(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_REAL(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_REAL(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_REAL(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_REAL(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_REAL\n(*Collection of tests for assert function assertArrayEqual_REAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF REAL; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF REAL; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF REAL; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF REAL; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_LREAL",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_LREAL",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF LREAL",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 152,\n\tName := 'assertArrayEqual_LREAL',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LREAL(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LREAL(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LREAL(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LREAL(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LREAL(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LREAL(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_LREAL\n(*Collection of tests for assert function assertArrayEqual_LREAL*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF LREAL; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF LREAL; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF LREAL; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF LREAL; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_STRING",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_STRING",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF STRING",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 153,\n\tName := 'assertArrayEqual_STRING',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_STRING(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_STRING(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_STRING(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_STRING(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_STRING(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_STRING(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_STRING\n(*Collection of tests for assert function assertArrayEqual_STRING*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF STRING; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF STRING; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF STRING; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF STRING; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_WSTRING",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_WSTRING",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF WSTRING",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 154,\n\tName := 'assertArrayEqual_WSTRING',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_WSTRING(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_WSTRING(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_WSTRING(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_WSTRING(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_WSTRING(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_WSTRING(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_WSTRING\n(*Collection of tests for assert function assertArrayEqual_WSTRING*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF WSTRING; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF WSTRING; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF WSTRING; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF WSTRING; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 155,\n\tName := 'assertArrayEqual_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_TIME(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_TIME(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_TIME(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_TIME(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_TIME(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_TIME(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_TIME\n(*Collection of tests for assert function assertArrayEqual_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF TIME; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF TIME; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF TIME; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF TIME; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_LTIME",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_LTIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF LTIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 156,\n\tName := 'assertArrayEqual_LTIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LTIME(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LTIME(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LTIME(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LTIME(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LTIME(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LTIME(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_LTIME\n(*Collection of tests for assert function assertArrayEqual_LTIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF LTIME; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF LTIME; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF LTIME; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF LTIME; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_DATE",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_DATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF DATE",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 157,\n\tName := 'assertArrayEqual_DATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_DATE(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_DATE(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_DATE(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_DATE(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_DATE(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_DATE(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_DATE\n(*Collection of tests for assert function assertArrayEqual_DATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF DATE; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF DATE; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF DATE; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF DATE; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_LDATE",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_LDATE",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF LDATE",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 158,\n\tName := 'assertArrayEqual_LDATE',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LDATE(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LDATE(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LDATE(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LDATE(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LDATE(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LDATE(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_LDATE\n(*Collection of tests for assert function assertArrayEqual_LDATE*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF LDATE; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF LDATE; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF LDATE; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF LDATE; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_DATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_DATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF DATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 159,\n\tName := 'assertArrayEqual_DATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_DATE_AND_TIME(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_DATE_AND_TIME(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_DATE_AND_TIME(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_DATE_AND_TIME(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_DATE_AND_TIME(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_DATE_AND_TIME(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_DATE_AND_TIME\n(*Collection of tests for assert function assertArrayEqual_DATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF DATE_AND_TIME; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF DATE_AND_TIME; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF DATE_AND_TIME; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF DATE_AND_TIME; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_LDATE_AND_TIME",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_LDATE_AND_TIME",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF LDATE_AND_TIME",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 160,\n\tName := 'assertArrayEqual_LDATE_AND_TIME',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LDATE_AND_TIME(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LDATE_AND_TIME(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LDATE_AND_TIME(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LDATE_AND_TIME(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LDATE_AND_TIME(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LDATE_AND_TIME(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_LDATE_AND_TIME\n(*Collection of tests for assert function assertArrayEqual_LDATE_AND_TIME*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF LDATE_AND_TIME; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF LDATE_AND_TIME; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF LDATE_AND_TIME; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF LDATE_AND_TIME; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_TIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_TIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF TIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 161,\n\tName := 'assertArrayEqual_TIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_TIME_OF_DAY(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_TIME_OF_DAY(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_TIME_OF_DAY(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_TIME_OF_DAY(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_TIME_OF_DAY(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_TIME_OF_DAY(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_TIME_OF_DAY\n(*Collection of tests for assert function assertArrayEqual_TIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF TIME_OF_DAY; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF TIME_OF_DAY; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF TIME_OF_DAY; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF TIME_OF_DAY; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertArrayEqual_LTIME_OF_DAY",
      "type": "program",
      "description": "Collection of tests for assert function assertArrayEqual_LTIME_OF_DAY",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "ARRAY[0..70] OF LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "ARRAY[0..70] OF LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "ARRAY[0..70] OF LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 3 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "ARRAY[0..70] OF LTIME_OF_DAY",
              "attribute": "",
              "initialValue": "",
              "description": "Array data 4 of test case 2"
            },
            {
              "name": "i",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable i"
            },
            {
              "name": "j",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Iterator variable j"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 162,\n\tName := 'assertArrayEqual_LTIME_OF_DAY',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LTIME_OF_DAY(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LTIME_OF_DAY(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LTIME_OF_DAY(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LTIME_OF_DAY(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LTIME_OF_DAY(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LTIME_OF_DAY(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertArrayEqual_LTIME_OF_DAY\n(*Collection of tests for assert function assertArrayEqual_LTIME_OF_DAY*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : ARRAY[0..70] OF LTIME_OF_DAY; (*Array data 1 of test case 1*)\n\tvTestCase1_xp : ARRAY[0..70] OF LTIME_OF_DAY; (*Array data 2 of test case 1*)\n\tvTestCase2_act : ARRAY[0..70] OF LTIME_OF_DAY; (*Array data 3 of test case 2*)\n\tvTestCase2_xp : ARRAY[0..70] OF LTIME_OF_DAY; (*Array data 4 of test case 2*)\n\ti : UINT; (*Iterator variable i*)\n\tj : UINT; (*Iterator variable j*)\nEND_VAR\n"
    },
    {
      "name": "test_assertTrue",
      "type": "program",
      "description": "Collection of tests for assert function assertTrue",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 163,\n\tName := 'assertTrue',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN CONDITION TRUE';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the condition is TRUE';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := TRUE;\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertTrue(vTestCase1_act) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Condition was True and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Condition was True and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN CONDITION IS FALSE';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the condition is FALSE';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_xp := FALSE;\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertTrue(vTestCase1_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Condition was False and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Condition was False and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertTrue\n(*Collection of tests for assert function assertTrue*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : BOOL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : BOOL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : BOOL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : BOOL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : BOOL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : BOOL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    },
    {
      "name": "test_assertFalse",
      "type": "program",
      "description": "Collection of tests for assert function assertFalse",
      "docLink": "",
      "if": [
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCases",
              "type": "ARRAY[0..20] OF utTestCase",
              "attribute": "",
              "initialValue": "",
              "description": "Definition of all test cases for this POU"
            },
            {
              "name": "testRunner",
              "type": "utTestSuite",
              "attribute": "",
              "initialValue": "",
              "description": "Test Suite fb instance to run the tests"
            },
            {
              "name": "vRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to run all tests for this POU"
            },
            {
              "name": "vResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Manual command to reset all tests for this POU"
            }
          ]
        },
        {
          "name": "VAR",
          "vars": [
            {
              "name": "vTestCase1_act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 1"
            },
            {
              "name": "vTestCase1_xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 1"
            },
            {
              "name": "vTestCase2_act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 2"
            },
            {
              "name": "vTestCase2_xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 2"
            },
            {
              "name": "vTestCase3_act",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 1 of test case 3"
            },
            {
              "name": "vTestCase3_xp",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Test data 2 of test case 3"
            }
          ]
        }
      ],
      "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 164,\n\tName := 'assertFalse',\n    RunTests := GVL.RunAll OR vRunAll,\n\tResetTests := GVL.ResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\nGVL.Results[testRunner.Id] := testRunner.Summary;",
      "actions": [
        {
          "name": "TEST_CASE_1_SETUP",
          "code": "IF vTestCases[0].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN CONDITION FALSE';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the condition is FALSE';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := FALSE;\nEND_IF"
        },
        {
          "name": "TEST_CASE_1_EXEC",
          "code": "IF vTestCases[0].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF assertFalse(vTestCase1_act) THEN\n\t\tvTestCases[0].state := utTestCaseStates.PASSED;\n\t\tvTestCases[0].msg := 'Condition was False and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.FAILED;\n\t\tvTestCases[0].msg := 'Condition was False and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_SETUP",
          "code": "IF vTestCases[1].state = utTestCaseStates.SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN CONDITION IS TRUE';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the condition is TRUE';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_xp := TRUE;\nEND_IF"
        },
        {
          "name": "TEST_CASE_2_EXEC",
          "code": "IF vTestCases[1].state = utTestCaseStates.RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertFalse(vTestCase1_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.PASSED;\n\t\tvTestCases[1].msg := 'Condition was True and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.FAILED;\n\t\tvTestCases[1].msg := 'Condition was True and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF"
        }
      ],
      "declaration": "PROGRAM test_assertFalse\n(*Collection of tests for assert function assertFalse*)\nVAR\n\tvTestCases : ARRAY[0..20] OF utTestCase; (*Definition of all test cases for this POU*)\n\ttestRunner : utTestSuite; (*Test Suite fb instance to run the tests*)\n\tvRunAll : BOOL; (*Manual command to run all tests for this POU*)\n\tvResetAll : BOOL; (*Manual command to reset all tests for this POU*)\nEND_VAR\nVAR\n\tvTestCase1_act : BOOL; (*Test data 1 of test case 1*)\n\tvTestCase1_xp : BOOL; (*Test data 2 of test case 1*)\n\tvTestCase2_act : BOOL; (*Test data 1 of test case 2*)\n\tvTestCase2_xp : BOOL; (*Test data 2 of test case 2*)\n\tvTestCase3_act : BOOL; (*Test data 1 of test case 3*)\n\tvTestCase3_xp : BOOL; (*Test data 2 of test case 3*)\nEND_VAR\n"
    }
  ],
  "dts": []
}