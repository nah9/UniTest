{
  "info": {
    "companyName": "TK Automation",
    "companyURL": "https://github.com/tkucic",
    "projectName": "UniTest",
    "projectVersion": "1.0",
    "projectURL": "https://github.com/tkucic/UniTest",
    "contentDescription": "UniTest is a PLC, IDE and manufacturer agnostic library written using only the features of the IEC61131 standard. Due to this, portability to all IEC compliant platforms is straightforward and can be achieved programmatically or with minimal manual work.",
    "contactPerson": "Toni Kucic",
    "contentGenerated": "2021-05-14T20:20:18.2154107"
  },
  "namespaces": [
    {
      "name": "UniTest",
      "prgs": [],
      "fbs": [
        {
          "name": "utTestSuite",
          "type": "functionBlock",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "Id",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Id of the test object. Must be unique number"
                },
                {
                  "name": "Name",
                  "type": "STRING[250]",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Name of the test object"
                },
                {
                  "name": "RunTests",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Starts all tests that are in setup state. Sets state to running."
                },
                {
                  "name": "ResetTests",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Sets state to setup on test cases that are ut_PASSED or ut_FAILED."
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR_IN_OUT",
              "vars": [
                {
                  "name": "TestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array of test case definition"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR_OUTPUT",
              "vars": [
                {
                  "name": "Summary",
                  "type": "utTestCaseSummary",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Summary of the test results"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "runCmd",
                  "type": "R_TRIG",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Trigger to prevent constant run commands"
                },
                {
                  "name": "resetCmd",
                  "type": "R_TRIG",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Trigger to prevent constant reset commands"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Copy name of object under test*)\nSummary.Id := Id;\nSummary.Name := Name;\n\n(*Handle commands to start*)\nrunCmd(CLK:=RunTests);\nresetCmd(CLK:=ResetTests);\n\n(*Calculate total number of tests and other flags*)\nSummary.TotalTests := 0;\nSummary.TestsPassed := 0;\nSummary.TestsFailed := 0; \nSummary.TestsRunning := FALSE;\nFOR i:=0 TO 20 DO\n\tIF TestCases[i].id > 0 THEN\n\t\tSummary.TotalTests := Summary.TotalTests + 1;\n\tEND_IF\n\t(*Start the test if the Run command is true, the test exists and it is in setup state*)\n\tIF TestCases[i].id > 0 AND TestCases[i].state = utTestCaseStates.ut_SETUP AND runCmd.Q THEN\n\t\tTestCases[i].state := utTestCaseStates.ut_RUNNING;\n\tEND_IF\n\t\n\t(*Reset the test if the test exists and its ut_PASSED or ut_FAILED*)\n\tIF TestCases[i].id > 0 AND TestCases[i].state > utTestCaseStates.ut_RUNNING AND resetCmd.Q THEN\n\t\tTestCases[i].state := utTestCaseStates.ut_SETUP;\n\tEND_IF\n\t\n\t(*Check the states of the test cases*)\n\tIF TestCases[i].state = utTestCaseStates.ut_RUNNING THEN\n\t\tSummary.TestsRunning := TRUE;\n\tEND_IF\n\tIF TestCases[i].state = utTestCaseStates.ut_PASSED THEN\n\t\tSummary.TestsPassed := Summary.TestsPassed + 1;\n\tEND_IF\n\tIF TestCases[i].state = utTestCaseStates.ut_FAILED THEN\n\t\tSummary.TestsFailed := Summary.TestsFailed + 1;\n\tEND_IF\nEND_FOR\n\n(*Error if number of tests defined is 0*)\nIF Summary.TotalTests = 0 THEN\n\tSummary.Error := utErrors.ut_NO_TEST_CASES_DEFINED;\n\tRETURN;\nEND_IF\n\n(*Calculate the pass rate if all tests have finished*)\nIF NOT Summary.TestsRunning THEN\n\tSummary.PassRate := (Summary.TestsPassed / UINT_TO_REAL(Summary.TotalTests)) * 100.0;\nELSE\n\tSummary.PassRate := 0;\nEND_IF",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 3,
            "parCount": 6,
            "actionCount": 0,
            "lnCode": 51,
            "varSize": 3,
            "parSize": 12,
            "lnCodeSize": 51,
            "size": 66
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fb/utTestSuite.md",
          "description": "Enables running, resetting and reporting for tests cases defined of a POU under test"
        },
        {
          "name": "utTestReporter",
          "type": "functionBlock",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "Results",
                  "type": "POINTER TO ARRAY[0..65535] OF utTestCaseSummary",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Summaries of tests for each POU under test"
                },
                {
                  "name": "Size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (number of indexes)"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR_OUTPUT",
              "vars": [
                {
                  "name": "NrPousUnderTest",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Total number of POUs under test"
                },
                {
                  "name": "NrOfTests",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Total number of tests"
                },
                {
                  "name": "NrTestsPassed",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Number of tests passed"
                },
                {
                  "name": "NrTestsFailed",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Number of tests failed"
                },
                {
                  "name": "PassRate",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Total pass rate"
                },
                {
                  "name": "TestsInProgress",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Indicates that one or more tests are in progress"
                },
                {
                  "name": "Error",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Indicates that one or more tests are in error state"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Reset totals*)\nNrPousUnderTest := 0;\nNrOfTests := 0;\nNrTestsPassed := 0;\nNrTestsFailed := 0;\nPassRate := 0;\nTestsInProgress := FALSE;\nError := FALSE;\n\n(*Count totals*)\nFOR i:=0 TO Size DO\n\tIF Results[i].Id > 0 THEN\n\t\t(*Count existing POUs under test*)\n\t\tNrPousUnderTest := NrPousUnderTest + 1;\n\t\t(*Count the pass rate. Needs to be divided in the end by the number of total tests*)\n\t\tPassRate := PassRate + Results[i].PassRate;\n\t\t(*Count the number of tests*)\n\t\tNrOfTests := NrOfTests + Results[i].TotalTests;\n\t\t(*Count the number of tests passed*)\n\t\tNrTestsPassed := NrTestsPassed + Results[i].TestsPassed;\n\t\t(*Count the number of tests failed*)\n\t\tNrTestsFailed := NrTestsFailed + Results[i].TestsFailed;\n\t\t\n\t\t(*Indicators*)\n\t\tIF Results[i].TestsRunning THEN\n\t\t\tTestsInProgress := TRUE;\n\t\tEND_IF\n\t\tIF Results[i].Error <> utErrors.ut_NO_ERROR THEN\n\t\t\tError := TRUE;\n\t\tEND_IF\n\tEND_IF\nEND_FOR\nPassRate := PassRate / NrPousUnderTest;",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 1,
            "parCount": 8,
            "actionCount": 0,
            "lnCode": 33,
            "varSize": 1,
            "parSize": 16,
            "lnCodeSize": 33,
            "size": 50
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fb/utTestReporter.md",
          "description": "Provides feedback on the status of tests on a system scale"
        }
      ],
      "fcs": [
        {
          "name": "assertFalse",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "condition",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertFalse := NOT condition;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 1,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 2,
            "lnCodeSize": 2,
            "size": 4
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertFalse.md",
          "description": "Returns TRUE if condition is NOT TRUE"
        },
        {
          "name": "assertEqual_BOOL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_BOOL := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_BOOL.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_BYTE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_BYTE := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_BYTE.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_WORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_WORD := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_WORD.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_DWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_DWORD := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_DWORD.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_LWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_LWORD := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_LWORD.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_SINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_SINT := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_SINT.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_USINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_USINT := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_USINT.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_INT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_INT := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_INT.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_UINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_UINT := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_UINT.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_DINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_DINT := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_DINT.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_UDINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_UDINT := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_UDINT.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_LINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_LINT := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_LINT.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_ULINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_ULINT := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_ULINT.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_REAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_REAL := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_REAL.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_LREAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_LREAL := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_LREAL.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_STRING",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_STRING := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_STRING.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_WSTRING",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_WSTRING := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_WSTRING.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_TIME := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_TIME.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_LTIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_LTIME := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_LTIME.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_DATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_DATE := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_DATE.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_LDATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_LDATE := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_LDATE.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_DATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_DATE_AND_TIME := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_DATE_AND_TIME.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_LDATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_LDATE_AND_TIME := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_LDATE_AND_TIME.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_TIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_TIME_OF_DAY := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_TIME_OF_DAY.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertEqual_LTIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertEqual_LTIME_OF_DAY := act = xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertEqual_LTIME_OF_DAY.md",
          "description": "Returns TRUE if act = xp."
        },
        {
          "name": "assertNotEqual_BOOL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_BOOL := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_BOOL.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_BYTE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_BYTE := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_BYTE.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_WORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_WORD := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_WORD.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_DWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_DWORD := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_DWORD.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_LWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_LWORD := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_LWORD.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_SINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_SINT := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_SINT.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_USINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_USINT := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_USINT.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_INT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_INT := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_INT.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_UINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_UINT := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_UINT.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_DINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_DINT := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_DINT.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_UDINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_UDINT := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_UDINT.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_LINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_LINT := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_LINT.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_ULINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_ULINT := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_ULINT.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_REAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_REAL := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_REAL.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_LREAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_LREAL := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_LREAL.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_STRING",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_STRING := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_STRING.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_WSTRING",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_WSTRING := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_WSTRING.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_TIME := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_TIME.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_LTIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_LTIME := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_LTIME.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_DATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_DATE := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_DATE.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_LDATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_LDATE := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_LDATE.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_DATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_DATE_AND_TIME := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_DATE_AND_TIME.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_LDATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_LDATE_AND_TIME := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_LDATE_AND_TIME.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_TIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_TIME_OF_DAY := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_TIME_OF_DAY.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertNotEqual_LTIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertNotEqual_LTIME_OF_DAY := act <> xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertNotEqual_LTIME_OF_DAY.md",
          "description": "Returns TRUE if act <> xp."
        },
        {
          "name": "assertGreater_BYTE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_BYTE := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_BYTE.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_WORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_WORD := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_WORD.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_DWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_DWORD := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_DWORD.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_LWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_LWORD := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_LWORD.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_SINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_SINT := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_SINT.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_USINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_USINT := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_USINT.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_INT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_INT := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_INT.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_UINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_UINT := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_UINT.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_DINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_DINT := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_DINT.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_UDINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_UDINT := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_UDINT.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_LINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_LINT := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_LINT.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_ULINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_ULINT := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_ULINT.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_REAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_REAL := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_REAL.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_LREAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_LREAL := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_LREAL.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_TIME := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_TIME.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_LTIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_LTIME := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_LTIME.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_DATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_DATE := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_DATE.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_LDATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_LDATE := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_LDATE.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_DATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_DATE_AND_TIME := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_DATE_AND_TIME.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_LDATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_LDATE_AND_TIME := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_LDATE_AND_TIME.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_TIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_TIME_OF_DAY := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_TIME_OF_DAY.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreater_LTIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreater_LTIME_OF_DAY := act > xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreater_LTIME_OF_DAY.md",
          "description": "Returns TRUE if act > xp."
        },
        {
          "name": "assertGreaterEqual_BYTE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_BYTE := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_BYTE.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_WORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_WORD := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_WORD.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_DWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_DWORD := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_DWORD.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_LWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_LWORD := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_LWORD.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_SINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_SINT := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_SINT.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_USINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_USINT := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_USINT.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_INT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_INT := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_INT.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_UINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_UINT := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_UINT.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_DINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_DINT := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_DINT.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_UDINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_UDINT := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_UDINT.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_LINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_LINT := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_LINT.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_ULINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_ULINT := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_ULINT.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_REAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_REAL := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_REAL.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_LREAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_LREAL := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_LREAL.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_TIME := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_TIME.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_LTIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_LTIME := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_LTIME.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_DATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_DATE := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_DATE.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_LDATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_LDATE := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_LDATE.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_DATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_DATE_AND_TIME := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_DATE_AND_TIME.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_LDATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_LDATE_AND_TIME := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_LDATE_AND_TIME.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_TIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_TIME_OF_DAY := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_TIME_OF_DAY.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertGreaterEqual_LTIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertGreaterEqual_LTIME_OF_DAY := act >= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertGreaterEqual_LTIME_OF_DAY.md",
          "description": "Returns TRUE if act >= xp."
        },
        {
          "name": "assertLess_BYTE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_BYTE := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_BYTE.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_WORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_WORD := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_WORD.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_DWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_DWORD := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_DWORD.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_LWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_LWORD := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_LWORD.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_SINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_SINT := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_SINT.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_USINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_USINT := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_USINT.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_INT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_INT := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_INT.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_UINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_UINT := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_UINT.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_DINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_DINT := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_DINT.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_UDINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_UDINT := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_UDINT.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_LINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_LINT := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_LINT.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_ULINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_ULINT := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_ULINT.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_REAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_REAL := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_REAL.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_LREAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_LREAL := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_LREAL.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_TIME := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_TIME.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_LTIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_LTIME := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_LTIME.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_DATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_DATE := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_DATE.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_LDATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_LDATE := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_LDATE.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_DATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_DATE_AND_TIME := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_DATE_AND_TIME.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_LDATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_LDATE_AND_TIME := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_LDATE_AND_TIME.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_TIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_TIME_OF_DAY := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_TIME_OF_DAY.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLess_LTIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLess_LTIME_OF_DAY := act < xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLess_LTIME_OF_DAY.md",
          "description": "Returns TRUE if act < xp."
        },
        {
          "name": "assertLessEqual_BYTE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_BYTE := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_BYTE.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_WORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_WORD := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_WORD.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_DWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_DWORD := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_DWORD.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_LWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_LWORD := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_LWORD.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_SINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_SINT := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_SINT.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_USINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_USINT := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_USINT.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_INT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_INT := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_INT.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_UINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_UINT := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_UINT.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_DINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_DINT := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_DINT.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_UDINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_UDINT := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_UDINT.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_LINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_LINT := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_LINT.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_ULINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_ULINT := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_ULINT.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_REAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_REAL := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_REAL.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_LREAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_LREAL := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_LREAL.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_TIME := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_TIME.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_LTIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_LTIME := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_LTIME.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_DATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_DATE := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_DATE.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_LDATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_LDATE := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_LDATE.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_DATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_DATE_AND_TIME := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_DATE_AND_TIME.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_LDATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_LDATE_AND_TIME := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_LDATE_AND_TIME.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_TIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_TIME_OF_DAY := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_TIME_OF_DAY.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertLessEqual_LTIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertLessEqual_LTIME_OF_DAY := act <= xp;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 2,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 4,
            "lnCodeSize": 2,
            "size": 6
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertLessEqual_LTIME_OF_DAY.md",
          "description": "Returns TRUE if act <= xp."
        },
        {
          "name": "assertArrayEqual_BOOL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_BOOL := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_BOOL := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_BOOL.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_BYTE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_BYTE := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_BYTE := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_BYTE.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_WORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_WORD := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_WORD := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_WORD.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_DWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_DWORD := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_DWORD := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_DWORD.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_LWORD",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LWORD := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LWORD := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_LWORD.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_SINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_SINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_SINT := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_SINT.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_USINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_USINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_USINT := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_USINT.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_INT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_INT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_INT := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_INT.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_UINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_UINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_UINT := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_UINT.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_DINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_DINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_DINT := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_DINT.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_UDINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_UDINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_UDINT := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_UDINT.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_LINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LINT := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_LINT.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_ULINT",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_ULINT := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_ULINT := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_ULINT.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_REAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_REAL := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_REAL := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_REAL.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_LREAL",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LREAL := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LREAL := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_LREAL.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_STRING",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_STRING := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_STRING := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_STRING.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_WSTRING",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_WSTRING := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_WSTRING := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_WSTRING.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_TIME := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_TIME := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_TIME.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_LTIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LTIME := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LTIME := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_LTIME.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_DATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_DATE := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_DATE := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_DATE.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_LDATE",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LDATE := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LDATE := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_LDATE.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_DATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_DATE_AND_TIME := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_DATE_AND_TIME := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_DATE_AND_TIME.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_LDATE_AND_TIME",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LDATE_AND_TIME := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LDATE_AND_TIME := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_LDATE_AND_TIME.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_TIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_TIME_OF_DAY := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_TIME_OF_DAY := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_TIME_OF_DAY.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertArrayEqual_LTIME_OF_DAY",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "act",
                  "type": "POINTER TO ARRAY[0..32000] OF LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                },
                {
                  "name": "xp",
                  "type": "POINTER TO ARRAY[0..32000] OF LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test against"
                },
                {
                  "name": "size",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array (ADR(act))"
                }
              ],
              "attribute": ""
            },
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable"
                },
                {
                  "name": "vStop",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Size of the array / End of iteration"
                },
                {
                  "name": "pt1",
                  "type": "POINTER TO LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array act"
                },
                {
                  "name": "pt2",
                  "type": "POINTER TO LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Pointer to the element of the array xp"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "vStop := (size / SIZEOF(act^[0])) - 1;\n\nFOR i:=0 TO vStop DO\n\tpt1 := ADR(act^[i]);\n\tpt2 := ADR(xp^[i]);\n\tIF pt1^ <> pt2^ THEN\n\t\tassertArrayEqual_LTIME_OF_DAY := FALSE;\n\t\tRETURN;\n\tEND_IF\nEND_FOR\n(*If we reach here, all elements are equal*)\nassertArrayEqual_LTIME_OF_DAY := TRUE;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 4,
            "parCount": 3,
            "lnCode": 13,
            "varSize": 4,
            "parSize": 6,
            "lnCodeSize": 13,
            "size": 23
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertArrayEqual_LTIME_OF_DAY.md",
          "description": "Returns TRUE if act == xp."
        },
        {
          "name": "assertTrue",
          "type": "function",
          "returnType": "BOOL",
          "if": [
            {
              "name": "VAR_INPUT",
              "vars": [
                {
                  "name": "condition",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Variable to test"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "assertTrue := condition;\nRETURN;\n",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 0,
            "parCount": 1,
            "lnCode": 2,
            "varSize": 0,
            "parSize": 2,
            "lnCodeSize": 2,
            "size": 4
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/fc/assertTrue.md",
          "description": "Returns TRUE if condition is TRUE"
        }
      ],
      "class": [],
      "dts": [
        {
          "name": "utTestCase",
          "baseType": "struct",
          "initialValue": "",
          "attribute": "",
          "description": "Structure holding data about one test case",
          "components": [
            {
              "name": "id",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Identifier of the test"
            },
            {
              "name": "desc",
              "type": "ARRAY[0..4] OF STRING[255]",
              "attribute": "",
              "initialValue": "",
              "description": "Description of the test case"
            },
            {
              "name": "state",
              "type": "utTestCaseStates",
              "attribute": "",
              "initialValue": "",
              "description": "State of the test"
            },
            {
              "name": "msg",
              "type": "STRING[255]",
              "attribute": "",
              "initialValue": "",
              "description": "Result of the test"
            }
          ],
          "metrics": {
            "cptCount": 4,
            "size": 4
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/dt/utTestCase.md"
        },
        {
          "name": "utTestCaseStates",
          "baseType": "enum",
          "initialValue": "",
          "attribute": "",
          "description": "Defines all the states a test case can be in",
          "components": [
            {
              "name": "ut_SETUP",
              "initialValue": "0",
              "attribute": "",
              "type": "enum",
              "description": ""
            },
            {
              "name": "ut_RUNNING",
              "initialValue": "1",
              "attribute": "",
              "type": "enum",
              "description": ""
            },
            {
              "name": "ut_PASSED",
              "initialValue": "2",
              "attribute": "",
              "type": "enum",
              "description": ""
            },
            {
              "name": "ut_FAILED",
              "initialValue": "3",
              "attribute": "",
              "type": "enum",
              "description": ""
            }
          ],
          "metrics": {
            "cptCount": 4,
            "size": 4
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/dt/utTestCaseStates.md"
        },
        {
          "name": "utTestCaseSummary",
          "baseType": "struct",
          "initialValue": "",
          "attribute": "",
          "description": "Structure that holds the summary of all tests for a defined POU under test",
          "components": [
            {
              "name": "Id",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Id of the test object. Must be unique number"
            },
            {
              "name": "Name",
              "type": "STRING[250]",
              "attribute": "",
              "initialValue": "",
              "description": "Name of the test object"
            },
            {
              "name": "TotalTests",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Total number of tests existing"
            },
            {
              "name": "TestsPassed",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Number of tests passed"
            },
            {
              "name": "TestsFailed",
              "type": "UINT",
              "attribute": "",
              "initialValue": "",
              "description": "Number of tests failed"
            },
            {
              "name": "PassRate",
              "type": "REAL",
              "attribute": "",
              "initialValue": "",
              "description": "Pass rate % of the tests"
            },
            {
              "name": "TestsRunning",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "One or more tests are running"
            },
            {
              "name": "Error",
              "type": "utErrors",
              "attribute": "",
              "initialValue": "",
              "description": "Error code if error occured"
            }
          ],
          "metrics": {
            "cptCount": 8,
            "size": 8
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/dt/utTestCaseSummary.md"
        },
        {
          "name": "utErrors",
          "baseType": "enum",
          "initialValue": "",
          "attribute": "",
          "description": "Definition of all errors that can occur in the framework",
          "components": [
            {
              "name": "ut_NO_ERROR",
              "initialValue": "0",
              "attribute": "",
              "type": "enum",
              "description": ""
            },
            {
              "name": "ut_NO_TEST_CASES_DEFINED",
              "initialValue": "100",
              "attribute": "",
              "type": "enum",
              "description": ""
            }
          ],
          "metrics": {
            "cptCount": 2,
            "size": 2
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/UniTest/dt/utErrors.md"
        }
      ],
      "vars": [],
      "metrics": {
        "size": 1545,
        "varCount": 104,
        "parCount": 367,
        "dtCount": 4,
        "prgCount": 0,
        "fbCount": 2,
        "fcCount": 165,
        "classCount": 0,
        "lnCode": 689
      }
    },
    {
      "name": "Library_tests",
      "prgs": [
        {
          "name": "test_assertNotEqual_BOOL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 25,\n\tName := 'assertNotEqual_BOOL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := TRUE;\n\tvTestCase1_xp := FALSE;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_BOOL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := TRUE;\n\tvTestCase2_xp := TRUE;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_BOOL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_BOOL.md",
          "description": "Collection of tests for assert function assertNotEqual_BOOL"
        },
        {
          "name": "test_assertNotEqual_INT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 32,\n\tName := 'assertNotEqual_INT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_INT(115.4);\n\tvTestCase1_xp := REAL_TO_INT(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_INT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_INT(115.4);\n\tvTestCase2_xp := REAL_TO_INT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_INT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_INT.md",
          "description": "Collection of tests for assert function assertNotEqual_INT"
        },
        {
          "name": "test_assertNotEqual_DATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 46,\n\tName := 'assertNotEqual_DATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DT(115.4);\n\tvTestCase1_xp := REAL_TO_DT(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_DATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DT(115.4);\n\tvTestCase2_xp := REAL_TO_DT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_DATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_DATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertNotEqual_DATE_AND_TIME"
        },
        {
          "name": "test_assertGreater_LWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 53,\n\tName := 'assertGreater_LWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LWORD(115.4);\n\tvTestCase1_xp := REAL_TO_LWORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LWORD(8.4);\n\tvTestCase2_xp := REAL_TO_LWORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_LWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_LWORD.md",
          "description": "Collection of tests for assert function assertGreater_LWORD"
        },
        {
          "name": "test_assertNotEqual_LREAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 39,\n\tName := 'assertNotEqual_LREAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LREAL(115.4);\n\tvTestCase1_xp := REAL_TO_LREAL(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LREAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LREAL(115.4);\n\tvTestCase2_xp := REAL_TO_LREAL(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LREAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_LREAL.md",
          "description": "Collection of tests for assert function assertNotEqual_LREAL"
        },
        {
          "name": "test_assertLess_LTIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 109,\n\tName := 'assertLess_LTIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME(85.4);\n\tvTestCase1_xp := REAL_TO_LTIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LTIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_LTIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_LTIME.md",
          "description": "Collection of tests for assert function assertLess_LTIME"
        },
        {
          "name": "test_assertLessEqual_BYTE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 116,\n\tName := 'assertLessEqual_BYTE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BYTE(85.4);\n\tvTestCase1_xp := REAL_TO_BYTE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_BYTE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BYTE(115.4);\n\tvTestCase2_xp := REAL_TO_BYTE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_BYTE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_BYTE(115.4);\n\tvTestCase3_xp := REAL_TO_BYTE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_BYTE(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_BYTE.md",
          "description": "Collection of tests for assert function assertLessEqual_BYTE"
        },
        {
          "name": "test_assertLess_WORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 95,\n\tName := 'assertLess_WORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WORD(85.4);\n\tvTestCase1_xp := REAL_TO_WORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_WORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WORD(115.4);\n\tvTestCase2_xp := REAL_TO_WORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_WORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_WORD.md",
          "description": "Collection of tests for assert function assertLess_WORD"
        },
        {
          "name": "test_assertLess_DINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 102,\n\tName := 'assertLess_DINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DINT(85.4);\n\tvTestCase1_xp := REAL_TO_DINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_DINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DINT(115.4);\n\tvTestCase2_xp := REAL_TO_DINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_DINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_DINT.md",
          "description": "Collection of tests for assert function assertLess_DINT"
        },
        {
          "name": "test_assertGreater_LDATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 67,\n\tName := 'assertGreater_LDATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE(115.4);\n\tvTestCase1_xp := REAL_TO_LDATE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LDATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE(8.4);\n\tvTestCase2_xp := REAL_TO_LDATE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_LDATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_LDATE.md",
          "description": "Collection of tests for assert function assertGreater_LDATE"
        },
        {
          "name": "test_assertGreaterEqual_UDINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 81,\n\tName := 'assertGreaterEqual_UDINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UDINT(115.4);\n\tvTestCase1_xp := REAL_TO_UDINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_UDINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UDINT(115.4);\n\tvTestCase2_xp := REAL_TO_UDINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_UDINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_UDINT(85.4);\n\tvTestCase3_xp := REAL_TO_UDINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_UDINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_UDINT.md",
          "description": "Collection of tests for assert function assertGreaterEqual_UDINT"
        },
        {
          "name": "test_assertGreaterEqual_DATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 88,\n\tName := 'assertGreaterEqual_DATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE(115.4);\n\tvTestCase1_xp := REAL_TO_DATE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE(115.4);\n\tvTestCase2_xp := REAL_TO_DATE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DATE(85.4);\n\tvTestCase3_xp := REAL_TO_DATE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_DATE(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_DATE.md",
          "description": "Collection of tests for assert function assertGreaterEqual_DATE"
        },
        {
          "name": "test_assertGreaterEqual_DWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 74,\n\tName := 'assertGreaterEqual_DWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DWORD(115.4);\n\tvTestCase1_xp := REAL_TO_DWORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DWORD(115.4);\n\tvTestCase2_xp := REAL_TO_DWORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DWORD(85.4);\n\tvTestCase3_xp := REAL_TO_DWORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_DWORD(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_DWORD.md",
          "description": "Collection of tests for assert function assertGreaterEqual_DWORD"
        },
        {
          "name": "test_assertArrayEqual_LDATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 158,\n\tName := 'assertArrayEqual_LDATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LDATE(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LDATE(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LDATE(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LDATE(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LDATE(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LDATE(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_LDATE.md",
          "description": "Collection of tests for assert function assertArrayEqual_LDATE"
        },
        {
          "name": "test_assertLessEqual_UINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 123,\n\tName := 'assertLessEqual_UINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_UINT(115.4);\n\tvTestCase3_xp := REAL_TO_UINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_UINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UINT(85.4);\n\tvTestCase1_xp := REAL_TO_UINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_UINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UINT(115.4);\n\tvTestCase2_xp := REAL_TO_UINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_UINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_UINT.md",
          "description": "Collection of tests for assert function assertLessEqual_UINT"
        },
        {
          "name": "test_assertArrayEqual_REAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 151,\n\tName := 'assertArrayEqual_REAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_REAL(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_REAL(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_REAL(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_REAL(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_REAL(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_REAL(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_REAL.md",
          "description": "Collection of tests for assert function assertArrayEqual_REAL"
        },
        {
          "name": "test_assertLessEqual_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 130,\n\tName := 'assertLessEqual_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_TIME(115.4);\n\tvTestCase3_xp := REAL_TO_TIME(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_TIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME(85.4);\n\tvTestCase1_xp := REAL_TO_TIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_TIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_TIME.md",
          "description": "Collection of tests for assert function assertLessEqual_TIME"
        },
        {
          "name": "test_assertArrayEqual_USINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 144,\n\tName := 'assertArrayEqual_USINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_USINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_USINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_USINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_USINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_USINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_USINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_USINT.md",
          "description": "Collection of tests for assert function assertArrayEqual_USINT"
        },
        {
          "name": "test_assertLessEqual_LTIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 137,\n\tName := 'assertLessEqual_LTIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LTOD(115.4);\n\tvTestCase3_xp := REAL_TO_LTOD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_LTIME_OF_DAY(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTOD(85.4);\n\tvTestCase1_xp := REAL_TO_LTOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LTIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTOD(115.4);\n\tvTestCase2_xp := REAL_TO_LTOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LTIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_LTIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertLessEqual_LTIME_OF_DAY"
        },
        {
          "name": "test_assertEqual_BOOL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 0,\n\tName := 'assertEqual_BOOL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := TRUE;\n\tvTestCase1_xp := TRUE;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_BOOL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := TRUE;\n\tvTestCase2_xp := FALSE;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_BOOL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_BOOL.md",
          "description": "Collection of tests for assert function assertEqual_BOOL"
        },
        {
          "name": "test_assertEqual_USINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 6,\n\tName := 'assertEqual_USINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_USINT(115.4);\n\tvTestCase1_xp := REAL_TO_USINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_USINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_USINT(115.4);\n\tvTestCase2_xp := REAL_TO_USINT(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_USINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_USINT.md",
          "description": "Collection of tests for assert function assertEqual_USINT"
        },
        {
          "name": "test_assertEqual_DWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 3,\n\tName := 'assertEqual_DWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DWORD(115.4);\n\tvTestCase1_xp := REAL_TO_DWORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_DWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DWORD(115.4);\n\tvTestCase2_xp := REAL_TO_DWORD(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_DWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_DWORD.md",
          "description": "Collection of tests for assert function assertEqual_DWORD"
        },
        {
          "name": "test_assertEqual_UDINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 10,\n\tName := 'assertEqual_UDINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UDINT(115.4);\n\tvTestCase1_xp := REAL_TO_UDINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_UDINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UDINT(115.4);\n\tvTestCase2_xp := REAL_TO_UDINT(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_UDINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_UDINT.md",
          "description": "Collection of tests for assert function assertEqual_UDINT"
        },
        {
          "name": "test_assertGreater_LINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 60,\n\tName := 'assertGreater_LINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LINT(115.4);\n\tvTestCase1_xp := REAL_TO_LINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LINT(8.4);\n\tvTestCase2_xp := REAL_TO_LINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_LINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_LINT.md",
          "description": "Collection of tests for assert function assertGreater_LINT"
        },
        {
          "name": "test_assertNotEqual_BYTE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 26,\n\tName := 'assertNotEqual_BYTE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_BYTE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BYTE(115.4);\n\tvTestCase1_xp := REAL_TO_BYTE(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BYTE(115.4);\n\tvTestCase2_xp := REAL_TO_BYTE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_BYTE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_BYTE.md",
          "description": "Collection of tests for assert function assertNotEqual_BYTE"
        },
        {
          "name": "test_assertNotEqual_WORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 27,\n\tName := 'assertNotEqual_WORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_WORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WORD(115.4);\n\tvTestCase1_xp := REAL_TO_WORD(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_WORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WORD(115.4);\n\tvTestCase2_xp := REAL_TO_WORD(115.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_WORD.md",
          "description": "Collection of tests for assert function assertNotEqual_WORD"
        },
        {
          "name": "test_assertGreater_DINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 58,\n\tName := 'assertGreater_DINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DINT(8.4);\n\tvTestCase2_xp := REAL_TO_DINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DINT(115.4);\n\tvTestCase1_xp := REAL_TO_DINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_DINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_DINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_DINT.md",
          "description": "Collection of tests for assert function assertGreater_DINT"
        },
        {
          "name": "test_assertNotEqual_UINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 33,\n\tName := 'assertNotEqual_UINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_UINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UINT(115.4);\n\tvTestCase1_xp := REAL_TO_UINT(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UINT(115.4);\n\tvTestCase2_xp := REAL_TO_UINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_UINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_UINT.md",
          "description": "Collection of tests for assert function assertNotEqual_UINT"
        },
        {
          "name": "test_assertNotEqual_DATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 44,\n\tName := 'assertNotEqual_DATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE(115.4);\n\tvTestCase2_xp := REAL_TO_DATE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE(115.4);\n\tvTestCase1_xp := REAL_TO_DATE(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_DATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_DATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_DATE.md",
          "description": "Collection of tests for assert function assertNotEqual_DATE"
        },
        {
          "name": "test_assertNotEqual_LDATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 47,\n\tName := 'assertNotEqual_LDATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LDATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDT(115.4);\n\tvTestCase1_xp := REAL_TO_LDT(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDT(115.4);\n\tvTestCase2_xp := REAL_TO_LDT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LDATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_LDATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertNotEqual_LDATE_AND_TIME"
        },
        {
          "name": "test_assertGreater_INT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 56,\n\tName := 'assertGreater_INT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_INT(115.4);\n\tvTestCase1_xp := REAL_TO_INT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_INT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_INT(8.4);\n\tvTestCase2_xp := REAL_TO_INT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_INT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_INT.md",
          "description": "Collection of tests for assert function assertGreater_INT"
        },
        {
          "name": "test_assertGreater_UINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 57,\n\tName := 'assertGreater_UINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UINT(115.4);\n\tvTestCase1_xp := REAL_TO_UINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_UINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UINT(8.4);\n\tvTestCase2_xp := REAL_TO_UINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_UINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_UINT.md",
          "description": "Collection of tests for assert function assertGreater_UINT"
        },
        {
          "name": "test_assertNotEqual_DINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 34,\n\tName := 'assertNotEqual_DINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_DINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DINT(115.4);\n\tvTestCase1_xp := REAL_TO_DINT(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_DINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DINT(115.4);\n\tvTestCase2_xp := REAL_TO_DINT(115.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_DINT.md",
          "description": "Collection of tests for assert function assertNotEqual_DINT"
        },
        {
          "name": "test_assertGreater_SINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 54,\n\tName := 'assertGreater_SINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_SINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_SINT(115.4);\n\tvTestCase1_xp := REAL_TO_SINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_SINT(8.4);\n\tvTestCase2_xp := REAL_TO_SINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_SINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_SINT.md",
          "description": "Collection of tests for assert function assertGreater_SINT"
        },
        {
          "name": "test_assertNotEqual_USINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 31,\n\tName := 'assertNotEqual_USINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_USINT(115.4);\n\tvTestCase1_xp := REAL_TO_USINT(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_USINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_USINT(115.4);\n\tvTestCase2_xp := REAL_TO_USINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_USINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_USINT.md",
          "description": "Collection of tests for assert function assertNotEqual_USINT"
        },
        {
          "name": "test_assertGreater_DWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 52,\n\tName := 'assertGreater_DWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DWORD(115.4);\n\tvTestCase1_xp := REAL_TO_DWORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_DWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DWORD(8.4);\n\tvTestCase2_xp := REAL_TO_DWORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_DWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_DWORD.md",
          "description": "Collection of tests for assert function assertGreater_DWORD"
        },
        {
          "name": "test_assertNotEqual_REAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 38,\n\tName := 'assertNotEqual_REAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := 115.4;\n\tvTestCase1_xp := -85.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_REAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := 115.4;\n\tvTestCase2_xp := 115.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_REAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_REAL.md",
          "description": "Collection of tests for assert function assertNotEqual_REAL"
        },
        {
          "name": "test_assertGreater_USINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 55,\n\tName := 'assertGreater_USINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_USINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_USINT(115.4);\n\tvTestCase1_xp := REAL_TO_USINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_USINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_USINT(8.4);\n\tvTestCase2_xp := REAL_TO_USINT(85.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_USINT.md",
          "description": "Collection of tests for assert function assertGreater_USINT"
        },
        {
          "name": "test_assertNotEqual_LDATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 45,\n\tName := 'assertNotEqual_LDATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE(115.4);\n\tvTestCase1_xp := REAL_TO_LDATE(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LDATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LDATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_LDATE.md",
          "description": "Collection of tests for assert function assertNotEqual_LDATE"
        },
        {
          "name": "test_assertNotEqual_STRING",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 40,\n\tName := 'assertNotEqual_STRING',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_STRING(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_STRING(115.4);\n\tvTestCase1_xp := REAL_TO_STRING(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_STRING(115.4);\n\tvTestCase2_xp := REAL_TO_STRING(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_STRING(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_STRING.md",
          "description": "Collection of tests for assert function assertNotEqual_STRING"
        },
        {
          "name": "test_assertNotEqual_TIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 48,\n\tName := 'assertNotEqual_TIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_TIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TOD(115.4);\n\tvTestCase1_xp := REAL_TO_TOD(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_TIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TOD(115.4);\n\tvTestCase2_xp := REAL_TO_TOD(115.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_TIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertNotEqual_TIME_OF_DAY"
        },
        {
          "name": "test_assertGreater_UDINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 59,\n\tName := 'assertGreater_UDINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UDINT(115.4);\n\tvTestCase1_xp := REAL_TO_UDINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_UDINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UDINT(8.4);\n\tvTestCase2_xp := REAL_TO_UDINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_UDINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_UDINT.md",
          "description": "Collection of tests for assert function assertGreater_UDINT"
        },
        {
          "name": "test_assertNotEqual_LTIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 49,\n\tName := 'assertNotEqual_LTIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTOD(115.4);\n\tvTestCase1_xp := REAL_TO_LTOD(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LTIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTOD(115.4);\n\tvTestCase2_xp := REAL_TO_LTOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LTIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_LTIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertNotEqual_LTIME_OF_DAY"
        },
        {
          "name": "test_assertGreater_BYTE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 50,\n\tName := 'assertGreater_BYTE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BYTE(115.4);\n\tvTestCase1_xp := REAL_TO_BYTE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_BYTE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BYTE(8.4);\n\tvTestCase2_xp := REAL_TO_BYTE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_BYTE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_BYTE.md",
          "description": "Collection of tests for assert function assertGreater_BYTE"
        },
        {
          "name": "test_assertNotEqual_WSTRING",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 41,\n\tName := 'assertNotEqual_WSTRING',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_WSTRING(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WSTRING(115.4);\n\tvTestCase1_xp := REAL_TO_WSTRING(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_WSTRING(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WSTRING(115.4);\n\tvTestCase2_xp := REAL_TO_WSTRING(115.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_WSTRING.md",
          "description": "Collection of tests for assert function assertNotEqual_WSTRING"
        },
        {
          "name": "test_assertNotEqual_DWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 28,\n\tName := 'assertNotEqual_DWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DWORD(115.4);\n\tvTestCase1_xp := REAL_TO_DWORD(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_DWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DWORD(115.4);\n\tvTestCase2_xp := REAL_TO_DWORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_DWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_DWORD.md",
          "description": "Collection of tests for assert function assertNotEqual_DWORD"
        },
        {
          "name": "test_assertNotEqual_LWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 29,\n\tName := 'assertNotEqual_LWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LWORD(115.4);\n\tvTestCase1_xp := REAL_TO_LWORD(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LWORD(115.4);\n\tvTestCase2_xp := REAL_TO_LWORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_LWORD.md",
          "description": "Collection of tests for assert function assertNotEqual_LWORD"
        },
        {
          "name": "test_assertNotEqual_UDINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 35,\n\tName := 'assertNotEqual_UDINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UDINT(115.4);\n\tvTestCase1_xp := REAL_TO_UDINT(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_UDINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UDINT(115.4);\n\tvTestCase2_xp := REAL_TO_UDINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_UDINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_UDINT.md",
          "description": "Collection of tests for assert function assertNotEqual_UDINT"
        },
        {
          "name": "test_assertNotEqual_LINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 36,\n\tName := 'assertNotEqual_LINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LINT(115.4);\n\tvTestCase1_xp := REAL_TO_LINT(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LINT(115.4);\n\tvTestCase2_xp := REAL_TO_LINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_LINT.md",
          "description": "Collection of tests for assert function assertNotEqual_LINT"
        },
        {
          "name": "test_assertNotEqual_SINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 30,\n\tName := 'assertNotEqual_SINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_SINT(115.4);\n\tvTestCase2_xp := REAL_TO_SINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_SINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_SINT(115.4);\n\tvTestCase1_xp := REAL_TO_SINT(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_SINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_SINT.md",
          "description": "Collection of tests for assert function assertNotEqual_SINT"
        },
        {
          "name": "test_assertNotEqual_ULINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 37,\n\tName := 'assertNotEqual_ULINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_ULINT(115.4);\n\tvTestCase2_xp := REAL_TO_ULINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_ULINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_ULINT(115.4);\n\tvTestCase1_xp := REAL_TO_ULINT(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_ULINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_ULINT.md",
          "description": "Collection of tests for assert function assertNotEqual_ULINT"
        },
        {
          "name": "test_assertGreater_WORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 51,\n\tName := 'assertGreater_WORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WORD(8.4);\n\tvTestCase2_xp := REAL_TO_WORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_WORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WORD(115.4);\n\tvTestCase1_xp := REAL_TO_WORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_WORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_WORD.md",
          "description": "Collection of tests for assert function assertGreater_WORD"
        },
        {
          "name": "test_assertNotEqual_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 42,\n\tName := 'assertNotEqual_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_TIME(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_TIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_TIME.md",
          "description": "Collection of tests for assert function assertNotEqual_TIME"
        },
        {
          "name": "test_assertNotEqual_LTIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 43,\n\tName := 'assertNotEqual_LTIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters do not hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME(115.4);\n\tvTestCase1_xp := REAL_TO_LTIME(-85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertNotEqual_LTIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were not equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertNotEqual_LTIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertNotEqual_LTIME.md",
          "description": "Collection of tests for assert function assertNotEqual_LTIME"
        },
        {
          "name": "test_assertGreaterEqual_LTIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 93,\n\tName := 'assertGreaterEqual_LTIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTOD(115.4);\n\tvTestCase2_xp := REAL_TO_LTOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LTOD(85.4);\n\tvTestCase3_xp := REAL_TO_LTOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTOD(115.4);\n\tvTestCase1_xp := REAL_TO_LTOD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LTIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LTIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_LTIME_OF_DAY(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_LTIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertGreaterEqual_LTIME_OF_DAY"
        },
        {
          "name": "test_assertLessEqual_INT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 122,\n\tName := 'assertLessEqual_INT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_INT(115.4);\n\tvTestCase3_xp := REAL_TO_INT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_INT(85.4);\n\tvTestCase1_xp := REAL_TO_INT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_INT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_INT(115.4);\n\tvTestCase2_xp := REAL_TO_INT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_INT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_INT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_INT.md",
          "description": "Collection of tests for assert function assertLessEqual_INT"
        },
        {
          "name": "test_assertLess_SINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 98,\n\tName := 'assertLess_SINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_SINT(85.4);\n\tvTestCase1_xp := REAL_TO_SINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_SINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_SINT(115.4);\n\tvTestCase2_xp := REAL_TO_SINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_SINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_SINT.md",
          "description": "Collection of tests for assert function assertLess_SINT"
        },
        {
          "name": "test_assertLess_USINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 99,\n\tName := 'assertLess_USINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_USINT(85.4);\n\tvTestCase1_xp := REAL_TO_USINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_USINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_USINT(115.4);\n\tvTestCase2_xp := REAL_TO_USINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_USINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_USINT.md",
          "description": "Collection of tests for assert function assertLess_USINT"
        },
        {
          "name": "test_assertLess_DATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 110,\n\tName := 'assertLess_DATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_DATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE(85.4);\n\tvTestCase1_xp := REAL_TO_DATE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE(115.4);\n\tvTestCase2_xp := REAL_TO_DATE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_DATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_DATE.md",
          "description": "Collection of tests for assert function assertLess_DATE"
        },
        {
          "name": "test_assertLess_DATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 112,\n\tName := 'assertLess_DATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DT(85.4);\n\tvTestCase1_xp := REAL_TO_DT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_DATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DT(115.4);\n\tvTestCase2_xp := REAL_TO_DT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_DATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_DATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertLess_DATE_AND_TIME"
        },
        {
          "name": "test_assertLess_LDATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 113,\n\tName := 'assertLess_LDATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDT(85.4);\n\tvTestCase1_xp := REAL_TO_LDT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LDATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDT(115.4);\n\tvTestCase2_xp := REAL_TO_LDT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_LDATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_LDATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertLess_LDATE_AND_TIME"
        },
        {
          "name": "test_assertLessEqual_USINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 121,\n\tName := 'assertLessEqual_USINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_USINT(115.4);\n\tvTestCase2_xp := REAL_TO_USINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_USINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_USINT(85.4);\n\tvTestCase1_xp := REAL_TO_USINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_USINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_USINT(115.4);\n\tvTestCase3_xp := REAL_TO_USINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_USINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_USINT.md",
          "description": "Collection of tests for assert function assertLessEqual_USINT"
        },
        {
          "name": "test_assertLess_INT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 100,\n\tName := 'assertLess_INT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_INT(115.4);\n\tvTestCase2_xp := REAL_TO_INT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_INT(85.4);\n\tvTestCase1_xp := REAL_TO_INT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_INT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_INT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_INT.md",
          "description": "Collection of tests for assert function assertLess_INT"
        },
        {
          "name": "test_assertLessEqual_DWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 118,\n\tName := 'assertLessEqual_DWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_DWORD(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DWORD(85.4);\n\tvTestCase1_xp := REAL_TO_DWORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DWORD(115.4);\n\tvTestCase2_xp := REAL_TO_DWORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DWORD(115.4);\n\tvTestCase3_xp := REAL_TO_DWORD(85.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_DWORD.md",
          "description": "Collection of tests for assert function assertLessEqual_DWORD"
        },
        {
          "name": "test_assertLess_LWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 97,\n\tName := 'assertLess_LWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_LWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LWORD(85.4);\n\tvTestCase1_xp := REAL_TO_LWORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LWORD(115.4);\n\tvTestCase2_xp := REAL_TO_LWORD(85.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_LWORD.md",
          "description": "Collection of tests for assert function assertLess_LWORD"
        },
        {
          "name": "test_assertLessEqual_WORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 117,\n\tName := 'assertLessEqual_WORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_WORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WORD(115.4);\n\tvTestCase2_xp := REAL_TO_WORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_WORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WORD(85.4);\n\tvTestCase1_xp := REAL_TO_WORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_WORD(115.4);\n\tvTestCase3_xp := REAL_TO_WORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_WORD(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_WORD.md",
          "description": "Collection of tests for assert function assertLessEqual_WORD"
        },
        {
          "name": "test_assertLess_LINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 104,\n\tName := 'assertLess_LINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_LINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LINT(85.4);\n\tvTestCase1_xp := REAL_TO_LINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LINT(115.4);\n\tvTestCase2_xp := REAL_TO_LINT(85.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_LINT.md",
          "description": "Collection of tests for assert function assertLess_LINT"
        },
        {
          "name": "test_assertLessEqual_LWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 119,\n\tName := 'assertLessEqual_LWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LWORD(85.4);\n\tvTestCase1_xp := REAL_TO_LWORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LWORD(115.4);\n\tvTestCase2_xp := REAL_TO_LWORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LWORD(115.4);\n\tvTestCase3_xp := REAL_TO_LWORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_LWORD(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_LWORD.md",
          "description": "Collection of tests for assert function assertLessEqual_LWORD"
        },
        {
          "name": "test_assertLessEqual_SINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 120,\n\tName := 'assertLessEqual_SINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_SINT(85.4);\n\tvTestCase1_xp := REAL_TO_SINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_SINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_SINT(115.4);\n\tvTestCase2_xp := REAL_TO_SINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_SINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_SINT(115.4);\n\tvTestCase3_xp := REAL_TO_SINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_SINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_SINT.md",
          "description": "Collection of tests for assert function assertLessEqual_SINT"
        },
        {
          "name": "test_assertLess_LDATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 111,\n\tName := 'assertLess_LDATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_LDATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE(85.4);\n\tvTestCase1_xp := REAL_TO_LDATE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LDATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE(85.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_LDATE.md",
          "description": "Collection of tests for assert function assertLess_LDATE"
        },
        {
          "name": "test_assertLess_ULINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 105,\n\tName := 'assertLess_ULINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_ULINT(85.4);\n\tvTestCase1_xp := REAL_TO_ULINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_ULINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_ULINT(115.4);\n\tvTestCase2_xp := REAL_TO_ULINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_ULINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_ULINT.md",
          "description": "Collection of tests for assert function assertLess_ULINT"
        },
        {
          "name": "test_assertLess_REAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 106,\n\tName := 'assertLess_REAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := 85.4;\n\tvTestCase1_xp := 115.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_REAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := 115.4;\n\tvTestCase2_xp := 85.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_REAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_REAL.md",
          "description": "Collection of tests for assert function assertLess_REAL"
        },
        {
          "name": "test_assertLess_TIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 114,\n\tName := 'assertLess_TIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TOD(115.4);\n\tvTestCase2_xp := REAL_TO_TOD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TOD(85.4);\n\tvTestCase1_xp := REAL_TO_TOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_TIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_TIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_TIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertLess_TIME_OF_DAY"
        },
        {
          "name": "test_assertLess_LREAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 107,\n\tName := 'assertLess_LREAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LREAL(115.4);\n\tvTestCase2_xp := REAL_TO_LREAL(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LREAL(85.4);\n\tvTestCase1_xp := REAL_TO_LREAL(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LREAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_LREAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_LREAL.md",
          "description": "Collection of tests for assert function assertLess_LREAL"
        },
        {
          "name": "test_assertLess_BYTE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 94,\n\tName := 'assertLess_BYTE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BYTE(85.4);\n\tvTestCase1_xp := REAL_TO_BYTE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_BYTE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BYTE(115.4);\n\tvTestCase2_xp := REAL_TO_BYTE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_BYTE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_BYTE.md",
          "description": "Collection of tests for assert function assertLess_BYTE"
        },
        {
          "name": "test_assertLess_UINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 101,\n\tName := 'assertLess_UINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UINT(85.4);\n\tvTestCase1_xp := REAL_TO_UINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_UINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UINT(115.4);\n\tvTestCase2_xp := REAL_TO_UINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_UINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_UINT.md",
          "description": "Collection of tests for assert function assertLess_UINT"
        },
        {
          "name": "test_assertLess_DWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 96,\n\tName := 'assertLess_DWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_DWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DWORD(115.4);\n\tvTestCase2_xp := REAL_TO_DWORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_DWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DWORD(85.4);\n\tvTestCase1_xp := REAL_TO_DWORD(115.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_DWORD.md",
          "description": "Collection of tests for assert function assertLess_DWORD"
        },
        {
          "name": "test_assertLess_UDINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 103,\n\tName := 'assertLess_UDINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_UDINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UDINT(115.4);\n\tvTestCase2_xp := REAL_TO_UDINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_UDINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UDINT(85.4);\n\tvTestCase1_xp := REAL_TO_UDINT(115.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_UDINT.md",
          "description": "Collection of tests for assert function assertLess_UDINT"
        },
        {
          "name": "test_assertLess_LTIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 115,\n\tName := 'assertLess_LTIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTOD(85.4);\n\tvTestCase1_xp := REAL_TO_LTOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_LTIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTOD(115.4);\n\tvTestCase2_xp := REAL_TO_LTOD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_LTIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_LTIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertLess_LTIME_OF_DAY"
        },
        {
          "name": "test_assertLess_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 108,\n\tName := 'assertLess_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME(85.4);\n\tvTestCase1_xp := REAL_TO_TIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLess_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_TIME(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLess_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLess_TIME.md",
          "description": "Collection of tests for assert function assertLess_TIME"
        },
        {
          "name": "test_assertGreater_REAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 62,\n\tName := 'assertGreater_REAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_REAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := 115.4;\n\tvTestCase1_xp := 85.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_REAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := 8.4;\n\tvTestCase2_xp := 85.4;\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_REAL.md",
          "description": "Collection of tests for assert function assertGreater_REAL"
        },
        {
          "name": "test_assertGreaterEqual_LDATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 91,\n\tName := 'assertGreaterEqual_LDATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDT(115.4);\n\tvTestCase1_xp := REAL_TO_LDT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LDATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDT(115.4);\n\tvTestCase2_xp := REAL_TO_LDT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LDATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LDT(85.4);\n\tvTestCase3_xp := REAL_TO_LDT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_LDATE_AND_TIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_LDATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertGreaterEqual_LDATE_AND_TIME"
        },
        {
          "name": "test_assertGreaterEqual_TIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 92,\n\tName := 'assertGreaterEqual_TIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TOD(115.4);\n\tvTestCase1_xp := REAL_TO_TOD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_TIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TOD(115.4);\n\tvTestCase2_xp := REAL_TO_TOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_TIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_TOD(85.4);\n\tvTestCase3_xp := REAL_TO_TOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_TIME_OF_DAY(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_TIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertGreaterEqual_TIME_OF_DAY"
        },
        {
          "name": "test_assertGreater_DATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 68,\n\tName := 'assertGreater_DATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_DATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DT(115.4);\n\tvTestCase1_xp := REAL_TO_DT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DT(8.4);\n\tvTestCase2_xp := REAL_TO_DT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_DATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_DATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertGreater_DATE_AND_TIME"
        },
        {
          "name": "test_assertGreaterEqual_UINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 79,\n\tName := 'assertGreaterEqual_UINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UINT(115.4);\n\tvTestCase2_xp := REAL_TO_UINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_UINT(85.4);\n\tvTestCase3_xp := REAL_TO_UINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UINT(115.4);\n\tvTestCase1_xp := REAL_TO_UINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_UINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_UINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_UINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_UINT.md",
          "description": "Collection of tests for assert function assertGreaterEqual_UINT"
        },
        {
          "name": "test_assertGreaterEqual_LINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 82,\n\tName := 'assertGreaterEqual_LINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_LINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LINT(115.4);\n\tvTestCase1_xp := REAL_TO_LINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LINT(115.4);\n\tvTestCase2_xp := REAL_TO_LINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LINT(85.4);\n\tvTestCase3_xp := REAL_TO_LINT(115.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_LINT.md",
          "description": "Collection of tests for assert function assertGreaterEqual_LINT"
        },
        {
          "name": "test_assertGreaterEqual_DATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 90,\n\tName := 'assertGreaterEqual_DATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DT(115.4);\n\tvTestCase1_xp := REAL_TO_DT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DT(115.4);\n\tvTestCase2_xp := REAL_TO_DT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DT(85.4);\n\tvTestCase3_xp := REAL_TO_DT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_DATE_AND_TIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_DATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertGreaterEqual_DATE_AND_TIME"
        },
        {
          "name": "test_assertGreater_LDATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 69,\n\tName := 'assertGreater_LDATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_LDATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDT(115.4);\n\tvTestCase1_xp := REAL_TO_LDT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LDATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDT(8.4);\n\tvTestCase2_xp := REAL_TO_LDT(85.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_LDATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertGreater_LDATE_AND_TIME"
        },
        {
          "name": "test_assertGreaterEqual_LTIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 87,\n\tName := 'assertGreaterEqual_LTIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME(115.4);\n\tvTestCase1_xp := REAL_TO_LTIME(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LTIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LTIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LTIME(85.4);\n\tvTestCase3_xp := REAL_TO_LTIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_LTIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_LTIME.md",
          "description": "Collection of tests for assert function assertGreaterEqual_LTIME"
        },
        {
          "name": "test_assertGreater_DATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 66,\n\tName := 'assertGreater_DATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE(115.4);\n\tvTestCase1_xp := REAL_TO_DATE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_DATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE(8.4);\n\tvTestCase2_xp := REAL_TO_DATE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_DATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_DATE.md",
          "description": "Collection of tests for assert function assertGreater_DATE"
        },
        {
          "name": "test_assertGreaterEqual_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 86,\n\tName := 'assertGreaterEqual_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_TIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_TIME(85.4);\n\tvTestCase3_xp := REAL_TO_TIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_TIME(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_TIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_TIME.md",
          "description": "Collection of tests for assert function assertGreaterEqual_TIME"
        },
        {
          "name": "test_assertGreaterEqual_WORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 73,\n\tName := 'assertGreaterEqual_WORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WORD(115.4);\n\tvTestCase1_xp := REAL_TO_WORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_WORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WORD(115.4);\n\tvTestCase2_xp := REAL_TO_WORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_WORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_WORD(85.4);\n\tvTestCase3_xp := REAL_TO_WORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_WORD(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_WORD.md",
          "description": "Collection of tests for assert function assertGreaterEqual_WORD"
        },
        {
          "name": "test_assertGreaterEqual_LDATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 89,\n\tName := 'assertGreaterEqual_LDATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LDATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_LDATE(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LDATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE(115.4);\n\tvTestCase1_xp := REAL_TO_LDATE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LDATE(85.4);\n\tvTestCase3_xp := REAL_TO_LDATE(115.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_LDATE.md",
          "description": "Collection of tests for assert function assertGreaterEqual_LDATE"
        },
        {
          "name": "test_assertGreaterEqual_DINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 80,\n\tName := 'assertGreaterEqual_DINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DINT(115.4);\n\tvTestCase1_xp := REAL_TO_DINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DINT(115.4);\n\tvTestCase2_xp := REAL_TO_DINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_DINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DINT(85.4);\n\tvTestCase3_xp := REAL_TO_DINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_DINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_DINT.md",
          "description": "Collection of tests for assert function assertGreaterEqual_DINT"
        },
        {
          "name": "test_assertGreaterEqual_LWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 75,\n\tName := 'assertGreaterEqual_LWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_LWORD(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LWORD(115.4);\n\tvTestCase1_xp := REAL_TO_LWORD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LWORD(115.4);\n\tvTestCase2_xp := REAL_TO_LWORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LWORD(85.4);\n\tvTestCase3_xp := REAL_TO_LWORD(115.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_LWORD.md",
          "description": "Collection of tests for assert function assertGreaterEqual_LWORD"
        },
        {
          "name": "test_assertGreaterEqual_ULINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 83,\n\tName := 'assertGreaterEqual_ULINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_ULINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_ULINT(115.4);\n\tvTestCase1_xp := REAL_TO_ULINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_ULINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_ULINT(115.4);\n\tvTestCase2_xp := REAL_TO_ULINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_ULINT(85.4);\n\tvTestCase3_xp := REAL_TO_ULINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_ULINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_ULINT.md",
          "description": "Collection of tests for assert function assertGreaterEqual_ULINT"
        },
        {
          "name": "test_assertGreaterEqual_SINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 76,\n\tName := 'assertGreaterEqual_SINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_SINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_SINT(115.4);\n\tvTestCase1_xp := REAL_TO_SINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_SINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_SINT(115.4);\n\tvTestCase2_xp := REAL_TO_SINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_SINT(85.4);\n\tvTestCase3_xp := REAL_TO_SINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_SINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_SINT.md",
          "description": "Collection of tests for assert function assertGreaterEqual_SINT"
        },
        {
          "name": "test_assertGreater_LREAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 63,\n\tName := 'assertGreater_LREAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LREAL(115.4);\n\tvTestCase1_xp := REAL_TO_LREAL(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LREAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LREAL(8.4);\n\tvTestCase2_xp := REAL_TO_LREAL(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_LREAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_LREAL.md",
          "description": "Collection of tests for assert function assertGreater_LREAL"
        },
        {
          "name": "test_assertGreater_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 64,\n\tName := 'assertGreater_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_TIME(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME(8.4);\n\tvTestCase2_xp := REAL_TO_TIME(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_TIME.md",
          "description": "Collection of tests for assert function assertGreater_TIME"
        },
        {
          "name": "test_assertGreater_TIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 70,\n\tName := 'assertGreater_TIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TOD(115.4);\n\tvTestCase1_xp := REAL_TO_TOD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_TIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TOD(8.4);\n\tvTestCase2_xp := REAL_TO_TOD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_TIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_TIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertGreater_TIME_OF_DAY"
        },
        {
          "name": "test_assertGreater_LTIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 71,\n\tName := 'assertGreater_LTIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTOD(115.4);\n\tvTestCase1_xp := REAL_TO_LTOD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LTIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTOD(8.4);\n\tvTestCase2_xp := REAL_TO_LTOD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_LTIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_LTIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertGreater_LTIME_OF_DAY"
        },
        {
          "name": "test_assertGreater_LTIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 65,\n\tName := 'assertGreater_LTIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME(8.4);\n\tvTestCase2_xp := REAL_TO_LTIME(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_LTIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME(115.4);\n\tvTestCase1_xp := REAL_TO_LTIME(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_LTIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_LTIME.md",
          "description": "Collection of tests for assert function assertGreater_LTIME"
        },
        {
          "name": "test_assertGreaterEqual_BYTE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 72,\n\tName := 'assertGreaterEqual_BYTE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BYTE(115.4);\n\tvTestCase2_xp := REAL_TO_BYTE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_BYTE(85.4);\n\tvTestCase3_xp := REAL_TO_BYTE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_BYTE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BYTE(115.4);\n\tvTestCase1_xp := REAL_TO_BYTE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_BYTE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_BYTE(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_BYTE.md",
          "description": "Collection of tests for assert function assertGreaterEqual_BYTE"
        },
        {
          "name": "test_assertGreaterEqual_REAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 84,\n\tName := 'assertGreaterEqual_REAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := 115.4;\n\tvTestCase1_xp := 85.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_REAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := 115.4;\n\tvTestCase2_xp := 115.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_REAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := 85.4;\n\tvTestCase3_xp := 115.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_REAL(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_REAL.md",
          "description": "Collection of tests for assert function assertGreaterEqual_REAL"
        },
        {
          "name": "test_assertGreaterEqual_LREAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 85,\n\tName := 'assertGreaterEqual_LREAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LREAL(115.4);\n\tvTestCase1_xp := REAL_TO_LREAL(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LREAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LREAL(115.4);\n\tvTestCase2_xp := REAL_TO_LREAL(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_LREAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LREAL(85.4);\n\tvTestCase3_xp := REAL_TO_LREAL(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_LREAL(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_LREAL.md",
          "description": "Collection of tests for assert function assertGreaterEqual_LREAL"
        },
        {
          "name": "test_assertGreaterEqual_USINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "USINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 77,\n\tName := 'assertGreaterEqual_USINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_USINT(115.4);\n\tvTestCase1_xp := REAL_TO_USINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_USINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_USINT(115.4);\n\tvTestCase2_xp := REAL_TO_USINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_USINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_USINT(85.4);\n\tvTestCase3_xp := REAL_TO_USINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_USINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_USINT.md",
          "description": "Collection of tests for assert function assertGreaterEqual_USINT"
        },
        {
          "name": "test_assertGreaterEqual_INT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 78,\n\tName := 'assertGreaterEqual_INT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_INT(115.4);\n\tvTestCase1_xp := REAL_TO_INT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_INT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_INT(115.4);\n\tvTestCase2_xp := REAL_TO_INT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreaterEqual_INT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_INT(85.4);\n\tvTestCase3_xp := REAL_TO_INT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreaterEqual_INT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreaterEqual_INT.md",
          "description": "Collection of tests for assert function assertGreaterEqual_INT"
        },
        {
          "name": "test_assertArrayEqual_WSTRING",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 154,\n\tName := 'assertArrayEqual_WSTRING',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_WSTRING(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_WSTRING(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_WSTRING(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_WSTRING(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_WSTRING(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_WSTRING(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_WSTRING.md",
          "description": "Collection of tests for assert function assertArrayEqual_WSTRING"
        },
        {
          "name": "test_assertArrayEqual_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 155,\n\tName := 'assertArrayEqual_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_TIME(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_TIME(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_TIME(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_TIME(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_TIME(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_TIME(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_TIME.md",
          "description": "Collection of tests for assert function assertArrayEqual_TIME"
        },
        {
          "name": "test_assertArrayEqual_LDATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 160,\n\tName := 'assertArrayEqual_LDATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LDATE_AND_TIME(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LDT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LDT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LDATE_AND_TIME(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LDT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LDT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_LDATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertArrayEqual_LDATE_AND_TIME"
        },
        {
          "name": "test_assertArrayEqual_TIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 161,\n\tName := 'assertArrayEqual_TIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_TOD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_TOD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_TIME_OF_DAY(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_TOD(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_TOD(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_TIME_OF_DAY(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_TIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertArrayEqual_TIME_OF_DAY"
        },
        {
          "name": "test_assertArrayEqual_LTIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 162,\n\tName := 'assertArrayEqual_LTIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LTOD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LTOD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LTIME_OF_DAY(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LTOD(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LTOD(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LTIME_OF_DAY(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_LTIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertArrayEqual_LTIME_OF_DAY"
        },
        {
          "name": "test_assertArrayEqual_DATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 159,\n\tName := 'assertArrayEqual_DATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_DATE_AND_TIME(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_DT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_DT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_DATE_AND_TIME(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_DT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_DT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_DATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertArrayEqual_DATE_AND_TIME"
        },
        {
          "name": "test_assertArrayEqual_LTIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 156,\n\tName := 'assertArrayEqual_LTIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LTIME(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LTIME(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LTIME(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LTIME(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LTIME(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LTIME(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_LTIME.md",
          "description": "Collection of tests for assert function assertArrayEqual_LTIME"
        },
        {
          "name": "test_assertTrue",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 163,\n\tName := 'assertTrue',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN CONDITION IS FALSE';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the condition is FALSE';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := FALSE;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN CONDITION TRUE';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the condition is TRUE';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := TRUE;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertTrue(vTestCase1_act) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Condition was True and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Condition was True and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertTrue(vTestCase2_act) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Condition was False and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Condition was False and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 6,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 57,
            "varSize": 6,
            "parSize": 0,
            "lnCodeSize": 57,
            "size": 63
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertTrue.md",
          "description": "Collection of tests for assert function assertTrue"
        },
        {
          "name": "test_assertArrayEqual_DATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 157,\n\tName := 'assertArrayEqual_DATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_DATE(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_DATE(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_DATE(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_DATE(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_DATE(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_DATE(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_DATE.md",
          "description": "Collection of tests for assert function assertArrayEqual_DATE"
        },
        {
          "name": "test_assertFalse",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 164,\n\tName := 'assertFalse',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN CONDITION FALSE';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the condition is FALSE';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := FALSE;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertFalse(vTestCase1_act) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Condition was False and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Condition was False and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN CONDITION IS TRUE';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the condition is TRUE';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := TRUE;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertFalse(vTestCase2_act) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Condition was True and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Condition was True and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 6,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 57,
            "varSize": 6,
            "parSize": 0,
            "lnCodeSize": 57,
            "size": 63
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertFalse.md",
          "description": "Collection of tests for assert function assertFalse"
        },
        {
          "name": "test_assertLessEqual_DINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 124,\n\tName := 'assertLessEqual_DINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DINT(115.4);\n\tvTestCase3_xp := REAL_TO_DINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_DINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DINT(85.4);\n\tvTestCase1_xp := REAL_TO_DINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DINT(115.4);\n\tvTestCase2_xp := REAL_TO_DINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_DINT.md",
          "description": "Collection of tests for assert function assertLessEqual_DINT"
        },
        {
          "name": "test_assertArrayEqual_STRING",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 153,\n\tName := 'assertArrayEqual_STRING',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_STRING(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_STRING(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_STRING(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_STRING(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_STRING(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_STRING(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_STRING.md",
          "description": "Collection of tests for assert function assertArrayEqual_STRING"
        },
        {
          "name": "test_assertLessEqual_LREAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 129,\n\tName := 'assertLessEqual_LREAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LREAL(115.4);\n\tvTestCase3_xp := REAL_TO_LREAL(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_LREAL(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LREAL(85.4);\n\tvTestCase1_xp := REAL_TO_LREAL(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LREAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LREAL(115.4);\n\tvTestCase2_xp := REAL_TO_LREAL(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LREAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_LREAL.md",
          "description": "Collection of tests for assert function assertLessEqual_LREAL"
        },
        {
          "name": "test_assertArrayEqual_WORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 140,\n\tName := 'assertArrayEqual_WORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_WORD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_WORD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_WORD(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_WORD(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_WORD(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_WORD(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_WORD.md",
          "description": "Collection of tests for assert function assertArrayEqual_WORD"
        },
        {
          "name": "test_assertArrayEqual_DWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF DWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 141,\n\tName := 'assertArrayEqual_DWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_DWORD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_DWORD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_DWORD(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_DWORD(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_DWORD(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_DWORD(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_DWORD.md",
          "description": "Collection of tests for assert function assertArrayEqual_DWORD"
        },
        {
          "name": "test_assertArrayEqual_SINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 143,\n\tName := 'assertArrayEqual_SINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_SINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_SINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_SINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_SINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_SINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_SINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_SINT.md",
          "description": "Collection of tests for assert function assertArrayEqual_SINT"
        },
        {
          "name": "test_assertArrayEqual_LREAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 152,\n\tName := 'assertArrayEqual_LREAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LREAL(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LREAL(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LREAL(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LREAL(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LREAL(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LREAL(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_LREAL.md",
          "description": "Collection of tests for assert function assertArrayEqual_LREAL"
        },
        {
          "name": "test_assertLessEqual_LTIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 131,\n\tName := 'assertLessEqual_LTIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LTIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LTIME(115.4);\n\tvTestCase3_xp := REAL_TO_LTIME(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_LTIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME(85.4);\n\tvTestCase1_xp := REAL_TO_LTIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LTIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_LTIME.md",
          "description": "Collection of tests for assert function assertLessEqual_LTIME"
        },
        {
          "name": "test_assertArrayEqual_LINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 149,\n\tName := 'assertArrayEqual_LINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_LINT.md",
          "description": "Collection of tests for assert function assertArrayEqual_LINT"
        },
        {
          "name": "test_assertLessEqual_REAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 128,\n\tName := 'assertLessEqual_REAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := 115.4;\n\tvTestCase2_xp := 115.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := 115.4;\n\tvTestCase3_xp := 85.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_REAL(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_REAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := 85.4;\n\tvTestCase1_xp := 115.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_REAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_REAL.md",
          "description": "Collection of tests for assert function assertLessEqual_REAL"
        },
        {
          "name": "test_assertArrayEqual_DINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 147,\n\tName := 'assertArrayEqual_DINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_DINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_DINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_DINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_DINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_DINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_DINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_DINT.md",
          "description": "Collection of tests for assert function assertArrayEqual_DINT"
        },
        {
          "name": "test_assertArrayEqual_UDINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 148,\n\tName := 'assertArrayEqual_UDINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_UDINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_UDINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_UDINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_UDINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_UDINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_UDINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_UDINT.md",
          "description": "Collection of tests for assert function assertArrayEqual_UDINT"
        },
        {
          "name": "test_assertLessEqual_LDATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 135,\n\tName := 'assertLessEqual_LDATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDT(115.4);\n\tvTestCase2_xp := REAL_TO_LDT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LDT(115.4);\n\tvTestCase3_xp := REAL_TO_LDT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_LDATE_AND_TIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDT(85.4);\n\tvTestCase1_xp := REAL_TO_LDT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LDATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LDATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_LDATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertLessEqual_LDATE_AND_TIME"
        },
        {
          "name": "test_assertArrayEqual_ULINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 150,\n\tName := 'assertArrayEqual_ULINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_ULINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_ULINT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_ULINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_ULINT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_ULINT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_ULINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_ULINT.md",
          "description": "Collection of tests for assert function assertArrayEqual_ULINT"
        },
        {
          "name": "test_assertArrayEqual_LWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 142,\n\tName := 'assertArrayEqual_LWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_LWORD(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_LWORD(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_LWORD(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_LWORD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_LWORD(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_LWORD(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_LWORD.md",
          "description": "Collection of tests for assert function assertArrayEqual_LWORD"
        },
        {
          "name": "test_assertLessEqual_TIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 136,\n\tName := 'assertLessEqual_TIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_TOD(115.4);\n\tvTestCase3_xp := REAL_TO_TOD(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_TIME_OF_DAY(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TOD(85.4);\n\tvTestCase1_xp := REAL_TO_TOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_TIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TOD(115.4);\n\tvTestCase2_xp := REAL_TO_TOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_TIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_TIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertLessEqual_TIME_OF_DAY"
        },
        {
          "name": "test_assertArrayEqual_INT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 145,\n\tName := 'assertArrayEqual_INT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_INT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_INT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_INT(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_INT(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_INT(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_INT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_INT.md",
          "description": "Collection of tests for assert function assertArrayEqual_INT"
        },
        {
          "name": "test_assertArrayEqual_BOOL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 138,\n\tName := 'assertArrayEqual_BOOL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_BOOL(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_BOOL(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_BOOL(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_BOOL(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_BOOL(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_BOOL(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_BOOL.md",
          "description": "Collection of tests for assert function assertArrayEqual_BOOL"
        },
        {
          "name": "test_assertLessEqual_UDINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "UDINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 125,\n\tName := 'assertLessEqual_UDINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_UDINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_UDINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_UDINT(115.4);\n\tvTestCase3_xp := REAL_TO_UDINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UDINT(85.4);\n\tvTestCase1_xp := REAL_TO_UDINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_UDINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UDINT(115.4);\n\tvTestCase2_xp := REAL_TO_UDINT(115.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_UDINT.md",
          "description": "Collection of tests for assert function assertLessEqual_UDINT"
        },
        {
          "name": "test_assertLessEqual_DATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 132,\n\tName := 'assertLessEqual_DATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_DATE(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DATE(115.4);\n\tvTestCase3_xp := REAL_TO_DATE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE(85.4);\n\tvTestCase1_xp := REAL_TO_DATE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE(115.4);\n\tvTestCase2_xp := REAL_TO_DATE(115.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_DATE.md",
          "description": "Collection of tests for assert function assertLessEqual_DATE"
        },
        {
          "name": "test_assertLessEqual_LINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 126,\n\tName := 'assertLessEqual_LINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LINT(115.4);\n\tvTestCase3_xp := REAL_TO_LINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_LINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LINT(85.4);\n\tvTestCase1_xp := REAL_TO_LINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LINT(115.4);\n\tvTestCase2_xp := REAL_TO_LINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_LINT.md",
          "description": "Collection of tests for assert function assertLessEqual_LINT"
        },
        {
          "name": "test_assertLessEqual_ULINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 127,\n\tName := 'assertLessEqual_ULINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_ULINT(85.4);\n\tvTestCase1_xp := REAL_TO_ULINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_ULINT(115.4);\n\tvTestCase3_xp := REAL_TO_ULINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_ULINT(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_ULINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_ULINT(115.4);\n\tvTestCase2_xp := REAL_TO_ULINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_ULINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_ULINT.md",
          "description": "Collection of tests for assert function assertLessEqual_ULINT"
        },
        {
          "name": "test_assertLessEqual_LDATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 133,\n\tName := 'assertLessEqual_LDATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_LDATE(115.4);\n\tvTestCase3_xp := REAL_TO_LDATE(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_LDATE(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE(85.4);\n\tvTestCase1_xp := REAL_TO_LDATE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LDATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_LDATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_LDATE.md",
          "description": "Collection of tests for assert function assertLessEqual_LDATE"
        },
        {
          "name": "test_assertLessEqual_DATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                },
                {
                  "name": "vTestCase3_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 3"
                },
                {
                  "name": "vTestCase3_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 3"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\nTEST_CASE_3_SETUP();\nTEST_CASE_3_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 134,\n\tName := 'assertLessEqual_DATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is less than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DT(85.4);\n\tvTestCase1_xp := REAL_TO_DT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_SETUP",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[2].id := 3;\n    vTestCases[2].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[2].desc[1] := 'Tests if the function returns False if the parameter act is greater than parameter xp';\n\tvTestCases[2].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase3_act := REAL_TO_DT(115.4);\n\tvTestCase3_xp := REAL_TO_DT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_3_EXEC",
              "code": "IF vTestCases[2].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertLessEqual_DATE_AND_TIME(vTestCase3_act, vTestCase3_xp) THEN\n\t\tvTestCases[2].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[2].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[2].msg := 'Parameter act was greater than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was less than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT EQUAL TO XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns True if the parameter act is equal to parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DT(115.4);\n\tvTestCase2_xp := REAL_TO_DT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertLessEqual_DATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was equal to xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 6,
            "lnCode": 83,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 83,
            "size": 93
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertLessEqual_DATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertLessEqual_DATE_AND_TIME"
        },
        {
          "name": "test_assertArrayEqual_UINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 146,\n\tName := 'assertArrayEqual_UINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_UINT(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := 35 * BOOL_TO_UINT(i MOD 2 = 0);\n\t\tvTestCase1_xp[i] := 35 * BOOL_TO_UINT(i MOD 2 = 0);\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_UINT(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := 35 * BOOL_TO_UINT(j MOD 2 = 0);\n\t\tvTestCase2_xp[j] := 35 * BOOL_TO_UINT(j MOD 2 <> 0);\n\tEND_FOR\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_UINT.md",
          "description": "Collection of tests for assert function assertArrayEqual_UINT"
        },
        {
          "name": "test_assertArrayEqual_BYTE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ARRAY[0..70] OF BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ARRAY[0..70] OF BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ARRAY[0..70] OF BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 3 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ARRAY[0..70] OF BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Array data 4 of test case 2"
                },
                {
                  "name": "i",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable i"
                },
                {
                  "name": "j",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Iterator variable j"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 139,\n\tName := 'assertArrayEqual_BYTE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertArrayEqual_BYTE(ADR(vTestCase2_act), ADR(vTestCase2_xp), SIZEOF(vTestCase2_act)) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Arrays were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN ARRAYS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in arrays are identical';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tFOR i:=0 TO 70 DO\n\t\tvTestCase1_act[i] := UINT_TO_BYTE(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\t\tvTestCase1_xp[i] := UINT_TO_BYTE(35 * BOOL_TO_UINT(i MOD 2 = 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertArrayEqual_BYTE(ADR(vTestCase1_act), ADR(vTestCase1_xp), SIZEOF(vTestCase1_act)) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Arrays were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN ARRAYS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in arrays are not identical';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tFOR j:=0 TO 70 DO\n\t\tvTestCase2_act[j] := UINT_TO_BYTE(35 * BOOL_TO_UINT(j MOD 2 = 0));\n\t\tvTestCase2_xp[j] := UINT_TO_BYTE(35 * BOOL_TO_UINT(j MOD 2 <> 0));\n\tEND_FOR\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 10,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 63,
            "varSize": 10,
            "parSize": 0,
            "lnCodeSize": 63,
            "size": 73
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertArrayEqual_BYTE.md",
          "description": "Collection of tests for assert function assertArrayEqual_BYTE"
        },
        {
          "name": "test_assertEqual_BYTE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "BYTE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 1,\n\tName := 'assertEqual_BYTE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_BYTE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_BYTE(115.4);\n\tvTestCase1_xp := REAL_TO_BYTE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_BYTE(115.4);\n\tvTestCase2_xp := REAL_TO_BYTE(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_BYTE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_BYTE.md",
          "description": "Collection of tests for assert function assertEqual_BYTE"
        },
        {
          "name": "test_assertEqual_TIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "TOD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 23,\n\tName := 'assertEqual_TIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_TIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TOD(115.4);\n\tvTestCase1_xp := REAL_TO_TOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_TIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TOD(115.4);\n\tvTestCase2_xp := REAL_TO_TOD(-84.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_TIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertEqual_TIME_OF_DAY"
        },
        {
          "name": "test_assertEqual_LDATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LDATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 20,\n\tName := 'assertEqual_LDATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LDATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDATE(115.4);\n\tvTestCase1_xp := REAL_TO_LDATE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDATE(115.4);\n\tvTestCase2_xp := REAL_TO_LDATE(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LDATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_LDATE.md",
          "description": "Collection of tests for assert function assertEqual_LDATE"
        },
        {
          "name": "test_assertEqual_WORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "WORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 2,\n\tName := 'assertEqual_WORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WORD(115.4);\n\tvTestCase2_xp := REAL_TO_WORD(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WORD(115.4);\n\tvTestCase1_xp := REAL_TO_WORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_WORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_WORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_WORD.md",
          "description": "Collection of tests for assert function assertEqual_WORD"
        },
        {
          "name": "test_assertEqual_UINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "UINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 8,\n\tName := 'assertEqual_UINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_UINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_UINT(115.4);\n\tvTestCase1_xp := REAL_TO_UINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_UINT(115.4);\n\tvTestCase2_xp := REAL_TO_UINT(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_UINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_UINT.md",
          "description": "Collection of tests for assert function assertEqual_UINT"
        },
        {
          "name": "test_assertEqual_LWORD",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LWORD",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 4,\n\tName := 'assertEqual_LWORD',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LWORD(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LWORD(115.4);\n\tvTestCase1_xp := REAL_TO_LWORD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LWORD(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LWORD(115.4);\n\tvTestCase2_xp := REAL_TO_LWORD(-84.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_LWORD.md",
          "description": "Collection of tests for assert function assertEqual_LWORD"
        },
        {
          "name": "test_assertEqual_LDATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LDATE_AND_TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 22,\n\tName := 'assertEqual_LDATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LDT(115.4);\n\tvTestCase1_xp := REAL_TO_LDT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LDATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LDT(115.4);\n\tvTestCase2_xp := REAL_TO_LDT(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LDATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_LDATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertEqual_LDATE_AND_TIME"
        },
        {
          "name": "test_assertEqual_LREAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LREAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 14,\n\tName := 'assertEqual_LREAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LREAL(115.4);\n\tvTestCase1_xp := REAL_TO_LREAL(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LREAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LREAL(115.4);\n\tvTestCase2_xp := REAL_TO_LREAL(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LREAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_LREAL.md",
          "description": "Collection of tests for assert function assertEqual_LREAL"
        },
        {
          "name": "test_assertEqual_INT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "INT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 7,\n\tName := 'assertEqual_INT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_INT(115.4);\n\tvTestCase1_xp := REAL_TO_INT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_INT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_INT(115.4);\n\tvTestCase2_xp := REAL_TO_INT(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_INT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_INT.md",
          "description": "Collection of tests for assert function assertEqual_INT"
        },
        {
          "name": "test_assertEqual_WSTRING",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "WSTRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 16,\n\tName := 'assertEqual_WSTRING',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_WSTRING(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_WSTRING(115.4);\n\tvTestCase1_xp := REAL_TO_WSTRING(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_WSTRING(115.4);\n\tvTestCase2_xp := REAL_TO_WSTRING(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_WSTRING(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_WSTRING.md",
          "description": "Collection of tests for assert function assertEqual_WSTRING"
        },
        {
          "name": "test_assertEqual_LTIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LTIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 18,\n\tName := 'assertEqual_LTIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LTIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTIME(115.4);\n\tvTestCase1_xp := REAL_TO_LTIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LTIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTIME(115.4);\n\tvTestCase2_xp := REAL_TO_LTIME(-84.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_LTIME.md",
          "description": "Collection of tests for assert function assertEqual_LTIME"
        },
        {
          "name": "test_assertEqual_ULINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 12,\n\tName := 'assertEqual_ULINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_ULINT(115.4);\n\tvTestCase1_xp := REAL_TO_ULINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_ULINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_ULINT(115.4);\n\tvTestCase2_xp := REAL_TO_ULINT(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_ULINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_ULINT.md",
          "description": "Collection of tests for assert function assertEqual_ULINT"
        },
        {
          "name": "test_assertEqual_LTIME_OF_DAY",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LTIME_OF_DAY",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 24,\n\tName := 'assertEqual_LTIME_OF_DAY',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LTIME_OF_DAY(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LTOD(115.4);\n\tvTestCase1_xp := REAL_TO_LTOD(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LTIME_OF_DAY(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LTOD(115.4);\n\tvTestCase2_xp := REAL_TO_LTOD(-84.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_LTIME_OF_DAY.md",
          "description": "Collection of tests for assert function assertEqual_LTIME_OF_DAY"
        },
        {
          "name": "test_assertEqual_SINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "SINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 5,\n\tName := 'assertEqual_SINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_SINT(115.4);\n\tvTestCase1_xp := REAL_TO_SINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_SINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_SINT(115.4);\n\tvTestCase2_xp := REAL_TO_SINT(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_SINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_SINT.md",
          "description": "Collection of tests for assert function assertEqual_SINT"
        },
        {
          "name": "test_assertEqual_REAL",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "REAL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 13,\n\tName := 'assertEqual_REAL',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := 115.4;\n\tvTestCase1_xp := 115.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_REAL(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := 115.4;\n\tvTestCase2_xp := -84.4;\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_REAL(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_REAL.md",
          "description": "Collection of tests for assert function assertEqual_REAL"
        },
        {
          "name": "test_assertEqual_DATE",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DATE",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 19,\n\tName := 'assertEqual_DATE',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DATE(115.4);\n\tvTestCase1_xp := REAL_TO_DATE(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_DATE(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DATE(115.4);\n\tvTestCase2_xp := REAL_TO_DATE(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_DATE(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_DATE.md",
          "description": "Collection of tests for assert function assertEqual_DATE"
        },
        {
          "name": "test_assertEqual_DINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 9,\n\tName := 'assertEqual_DINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DINT(115.4);\n\tvTestCase1_xp := REAL_TO_DINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_DINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DINT(115.4);\n\tvTestCase2_xp := REAL_TO_DINT(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_DINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_DINT.md",
          "description": "Collection of tests for assert function assertEqual_DINT"
        },
        {
          "name": "test_assertEqual_STRING",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "STRING",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 15,\n\tName := 'assertEqual_STRING',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_STRING(115.4);\n\tvTestCase2_xp := REAL_TO_STRING(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_STRING(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_STRING(115.4);\n\tvTestCase1_xp := REAL_TO_STRING(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_STRING(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_STRING.md",
          "description": "Collection of tests for assert function assertEqual_STRING"
        },
        {
          "name": "test_assertEqual_DATE_AND_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "DT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 21,\n\tName := 'assertEqual_DATE_AND_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_DT(115.4);\n\tvTestCase2_xp := REAL_TO_DT(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_DATE_AND_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_DT(115.4);\n\tvTestCase1_xp := REAL_TO_DT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_DATE_AND_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_DATE_AND_TIME.md",
          "description": "Collection of tests for assert function assertEqual_DATE_AND_TIME"
        },
        {
          "name": "test_assertEqual_TIME",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "TIME",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 17,\n\tName := 'assertEqual_TIME',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_TIME(115.4);\n\tvTestCase1_xp := REAL_TO_TIME(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_TIME(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_TIME(115.4);\n\tvTestCase2_xp := REAL_TO_TIME(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_TIME(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_TIME.md",
          "description": "Collection of tests for assert function assertEqual_TIME"
        },
        {
          "name": "test_assertEqual_LINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "LINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 11,\n\tName := 'assertEqual_LINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETERS EQUAL';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the passed in parameters hold the same value';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_LINT(115.4);\n\tvTestCase1_xp := REAL_TO_LINT(115.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertEqual_LINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Passed parameters were equal and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n\tvTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETERS NOT EQUAL';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the passed in parameters do not hold the same value';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_LINT(115.4);\n\tvTestCase2_xp := REAL_TO_LINT(-84.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertEqual_LINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Passed parameters were not equal and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertEqual_LINT.md",
          "description": "Collection of tests for assert function assertEqual_LINT"
        },
        {
          "name": "test_assertGreater_ULINT",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "vTestCases",
                  "type": "ARRAY[0..20] OF utTestCase",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Definition of all test cases for this POU"
                },
                {
                  "name": "testRunner",
                  "type": "utTestSuite",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test Suite fb instance to run the tests"
                },
                {
                  "name": "vRunAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to run all tests for this POU"
                },
                {
                  "name": "vResetAll",
                  "type": "BOOL",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Manual command to reset all tests for this POU"
                },
                {
                  "name": "vTestCase1_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 1"
                },
                {
                  "name": "vTestCase1_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 1"
                },
                {
                  "name": "vTestCase2_act",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 1 of test case 2"
                },
                {
                  "name": "vTestCase2_xp",
                  "type": "ULINT",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Test data 2 of test case 2"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "(*Run the test cases*)\nTEST_CASE_1_SETUP();\nTEST_CASE_1_EXEC();\n\nTEST_CASE_2_SETUP();\nTEST_CASE_2_EXEC();\n\n(*Instantiate the test runner*)\ntestRunner(\n\tId := 61,\n\tName := 'assertGreater_ULINT',\n    RunTests := gRunAll OR vRunAll,\n\tResetTests := gResetAll OR vResetAll,\n\tTestCases:=vTestCases);\n\n(*Report the results to the collection global*)\ngResults[testRunner.Id] := testRunner.Summary;",
          "actions": [
            {
              "name": "TEST_CASE_1_EXEC",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF assertGreater_ULINT(vTestCase1_act, vTestCase1_xp) THEN\n\t\tvTestCases[0].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned TRUE -> PASS';\n\tELSE\n\t\tvTestCases[0].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[0].msg := 'Parameter act was greater than xp and function returned FALSE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_SETUP",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[1].id := 2;\n    vTestCases[1].desc[0] := 'RETURNS FALSE WHEN PARAMETER ACT LESS THAN XP';\n    vTestCases[1].desc[1] := 'Tests if the function returns False if the parameter act is less than parameter xp';\n\tvTestCases[1].desc[2] := 'PASS IF: Return value is FALSE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase2_act := REAL_TO_ULINT(8.4);\n\tvTestCase2_xp := REAL_TO_ULINT(85.4);\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_2_EXEC",
              "code": "IF vTestCases[1].state = utTestCaseStates.ut_RUNNING THEN\n\t(*Run the test case*)\n\tIF NOT assertGreater_ULINT(vTestCase2_act, vTestCase2_xp) THEN\n\t\tvTestCases[1].state := utTestCaseStates.ut_PASSED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned FALSE -> PASS';\n\tELSE\n\t\tvTestCases[1].state := utTestCaseStates.ut_FAILED;\n\t\tvTestCases[1].msg := 'Parameter act was less than xp and function returned TRUE -> FAIL';\n\tEND_IF\nEND_IF",
              "docStrings": []
            },
            {
              "name": "TEST_CASE_1_SETUP",
              "code": "IF vTestCases[0].state = utTestCaseStates.ut_SETUP THEN\n\t(*Setup the test case information*)\n\tvTestCases[0].id := 1;\n\tvTestCases[0].desc[0] := 'RETURNS TRUE WHEN PARAMETER ACT GREATER THAN XP';\n    vTestCases[0].desc[1] := 'Tests if the function returns True if the parameter act is greater than parameter xp';\n\tvTestCases[0].desc[2] := 'PASS IF: Return value is TRUE';\n\t\n\t(*Setup needed variables*)\n\tvTestCase1_act := REAL_TO_ULINT(115.4);\n\tvTestCase1_xp := REAL_TO_ULINT(85.4);\nEND_IF",
              "docStrings": []
            }
          ],
          "docStrings": [],
          "metrics": {
            "varCount": 8,
            "parCount": 0,
            "actionCount": 4,
            "lnCode": 59,
            "varSize": 8,
            "parSize": 0,
            "lnCodeSize": 59,
            "size": 67
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/test_assertGreater_ULINT.md",
          "description": "Collection of tests for assert function assertGreater_ULINT"
        },
        {
          "name": "main",
          "type": "program",
          "if": [
            {
              "name": "VAR",
              "vars": [
                {
                  "name": "testReporter",
                  "type": "utTestReporter",
                  "attribute": "",
                  "initialValue": "",
                  "description": "Calculator for summaries of tests"
                }
              ],
              "attribute": ""
            }
          ],
          "code": "testReporter(Results:=ADR(gResults), Size:=SIZEOF(gResults) / SIZEOF(gResults[0]));",
          "actions": [],
          "docStrings": [],
          "metrics": {
            "varCount": 1,
            "parCount": 0,
            "actionCount": 0,
            "lnCode": 1,
            "varSize": 1,
            "parSize": 0,
            "lnCodeSize": 1,
            "size": 2
          },
          "docLink": "https://github.com/tkucic/UniTest/blob/main/docs/docs/ns/Library_tests/prg/main.md",
          "description": "Program to run the testReporter"
        }
      ],
      "fbs": [],
      "fcs": [],
      "class": [],
      "dts": [],
      "vars": [
        {
          "name": "VAR_GLOBAL",
          "vars": [
            {
              "name": "gResults",
              "type": "ARRAY[0..500] OF utTestCaseSummary",
              "attribute": "",
              "initialValue": "",
              "description": "Place to save all the sumaries of each POU under test"
            },
            {
              "name": "gRunAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Issues a RunTests command to all TestSuites"
            },
            {
              "name": "gResetAll",
              "type": "BOOL",
              "attribute": "",
              "initialValue": "",
              "description": "Issues a ResetTests command to all TestSuites"
            }
          ],
          "attribute": ""
        }
      ],
      "metrics": {
        "size": 12343,
        "varCount": 1455,
        "parCount": 0,
        "dtCount": 0,
        "prgCount": 166,
        "fbCount": 0,
        "fcCount": 0,
        "classCount": 0,
        "lnCode": 10888
      }
    }
  ],
  "sca": [
    {
      "Type": "Data type",
      "Project": "Iec Unit Test",
      "Namespace": "UniTest",
      "Object": "utTestCase",
      "Child": "",
      "Sev": "Quality",
      "Rule": "Data type unused",
      "Msg": "utTestCase is possibly not used in the project"
    },
    {
      "Type": "Data type component",
      "Project": "Iec Unit Test",
      "Namespace": "UniTest",
      "Object": "utTestCaseStates",
      "Child": "ut_SETUP",
      "Sev": "Quality",
      "Rule": "Missing description",
      "Msg": "Component ut_SETUP is missing description"
    },
    {
      "Type": "Data type component",
      "Project": "Iec Unit Test",
      "Namespace": "UniTest",
      "Object": "utTestCaseStates",
      "Child": "ut_RUNNING",
      "Sev": "Quality",
      "Rule": "Missing description",
      "Msg": "Component ut_RUNNING is missing description"
    },
    {
      "Type": "Data type component",
      "Project": "Iec Unit Test",
      "Namespace": "UniTest",
      "Object": "utTestCaseStates",
      "Child": "ut_PASSED",
      "Sev": "Quality",
      "Rule": "Missing description",
      "Msg": "Component ut_PASSED is missing description"
    },
    {
      "Type": "Data type component",
      "Project": "Iec Unit Test",
      "Namespace": "UniTest",
      "Object": "utTestCaseStates",
      "Child": "ut_FAILED",
      "Sev": "Quality",
      "Rule": "Missing description",
      "Msg": "Component ut_FAILED is missing description"
    },
    {
      "Type": "Data type component",
      "Project": "Iec Unit Test",
      "Namespace": "UniTest",
      "Object": "utErrors",
      "Child": "ut_NO_ERROR",
      "Sev": "Quality",
      "Rule": "Missing description",
      "Msg": "Component ut_NO_ERROR is missing description"
    },
    {
      "Type": "Data type component",
      "Project": "Iec Unit Test",
      "Namespace": "UniTest",
      "Object": "utErrors",
      "Child": "ut_NO_TEST_CASES_DEFINED",
      "Sev": "Quality",
      "Rule": "Missing description",
      "Msg": "Component ut_NO_TEST_CASES_DEFINED is missing description"
    }
  ],
  "metrics": {
    "size": 13888,
    "varCount": 1559,
    "parCount": 367,
    "dtCount": 4,
    "prgCount": 166,
    "fbCount": 2,
    "fcCount": 165,
    "classCount": 0,
    "lnCode": 11577
  }
}